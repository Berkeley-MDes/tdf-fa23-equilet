
/Users/jml/Documents/programming/git_repositories/tdf-fa23-equilet/project_demonstrables/particle_workbench/basic_fsr_clockrates/target/5.5.0/p2/basic_fsr_clockrates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fe130  085fd0a8  0000e130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00001eb8  023fe138  085fd0b0  0000e138  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007ae04  085fef68  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  1007ae74  1007ae74  0002ae74  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085fefd8  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000fdc  085fefdc  085fefdc  0001efdc  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001efdc  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013a7ec  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00013fcc  00000000  00000000  0015a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000403b1  00000000  00000000  0016e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d10  00000000  00000000  001aeb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000be28  00000000  00000000  001b1879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023bfa  00000000  00000000  001bd6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003fd92  00000000  00000000  001e129b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d33aa  00000000  00000000  0022102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008020  00000000  00000000  002f43d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	4813      	ldr	r0, [pc, #76]	; (85fd068 <module_user_pre_init+0x50>)
 85fd01a:	4914      	ldr	r1, [pc, #80]	; (85fd06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a13      	ldr	r2, [pc, #76]	; (85fd070 <module_user_pre_init+0x58>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b12      	ldr	r3, [pc, #72]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	4812      	ldr	r0, [pc, #72]	; (85fd078 <module_user_pre_init+0x60>)
 85fd030:	4a12      	ldr	r2, [pc, #72]	; (85fd07c <module_user_pre_init+0x64>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b12      	ldr	r3, [pc, #72]	; (85fd080 <module_user_pre_init+0x68>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fd03a:	4812      	ldr	r0, [pc, #72]	; (85fd084 <module_user_pre_init+0x6c>)
 85fd03c:	4912      	ldr	r1, [pc, #72]	; (85fd088 <module_user_pre_init+0x70>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a12      	ldr	r2, [pc, #72]	; (85fd08c <module_user_pre_init+0x74>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fd048:	4b0a      	ldr	r3, [pc, #40]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd04e:	4810      	ldr	r0, [pc, #64]	; (85fd090 <module_user_pre_init+0x78>)
 85fd050:	4910      	ldr	r1, [pc, #64]	; (85fd094 <module_user_pre_init+0x7c>)
 85fd052:	4288      	cmp	r0, r1
 85fd054:	d005      	beq.n	85fd062 <module_user_pre_init+0x4a>
 85fd056:	4a10      	ldr	r2, [pc, #64]	; (85fd098 <module_user_pre_init+0x80>)
 85fd058:	4282      	cmp	r2, r0
 85fd05a:	d002      	beq.n	85fd062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd05c:	4b05      	ldr	r3, [pc, #20]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd05e:	1a12      	subs	r2, r2, r0
 85fd060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd062:	4801      	ldr	r0, [pc, #4]	; (85fd068 <module_user_pre_init+0x50>)
 85fd064:	bd08      	pop	{r3, pc}
 85fd066:	bf00      	nop
 85fd068:	1007ae04 	.word	0x1007ae04
 85fd06c:	085fef68 	.word	0x085fef68
 85fd070:	1007ae74 	.word	0x1007ae74
 85fd074:	10110d2d 	.word	0x10110d2d
 85fd078:	1007ae74 	.word	0x1007ae74
 85fd07c:	1007afe8 	.word	0x1007afe8
 85fd080:	10110ea1 	.word	0x10110ea1
 85fd084:	023fe130 	.word	0x023fe130
 85fd088:	085fd0a8 	.word	0x085fd0a8
 85fd08c:	023fe138 	.word	0x023fe138
 85fd090:	023fe138 	.word	0x023fe138
 85fd094:	085fd0b0 	.word	0x085fd0b0
 85fd098:	023ffff0 	.word	0x023ffff0

085fd09c <dynalib_preinit>:
 85fd09c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fe138 <strlen>:
 23fe138:	4603      	mov	r3, r0
 23fe13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe13e:	2a00      	cmp	r2, #0
 23fe140:	d1fb      	bne.n	23fe13a <strlen+0x2>
 23fe142:	1a18      	subs	r0, r3, r0
 23fe144:	3801      	subs	r0, #1
 23fe146:	4770      	bx	lr

023fe148 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe148:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe14a:	f001 fbc1 	bl	23ff8d0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe14e:	2500      	movs	r5, #0
 23fe150:	4e05      	ldr	r6, [pc, #20]	; (23fe168 <module_user_init+0x20>)
 23fe152:	4c06      	ldr	r4, [pc, #24]	; (23fe16c <module_user_init+0x24>)
 23fe154:	1ba4      	subs	r4, r4, r6
 23fe156:	08a4      	lsrs	r4, r4, #2
 23fe158:	42ac      	cmp	r4, r5
 23fe15a:	d100      	bne.n	23fe15e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe15c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe15e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe162:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe164:	3501      	adds	r5, #1
 23fe166:	e7f7      	b.n	23fe158 <module_user_init+0x10>
 23fe168:	023fffcc 	.word	0x023fffcc
 23fe16c:	023ffff0 	.word	0x023ffff0

023fe170 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe170:	f000 b815 	b.w	23fe19e <setup>

023fe174 <module_user_loop>:
}

void module_user_loop() {
 23fe174:	b508      	push	{r3, lr}
    loop();
 23fe176:	f000 f81b 	bl	23fe1b0 <loop>
    _post_loop();
}
 23fe17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe17e:	f001 bb5f 	b.w	23ff840 <_post_loop>

023fe182 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fe182:	f000 bb6f 	b.w	23fe864 <malloc>

023fe186 <_Znaj>:
 23fe186:	f000 bb6d 	b.w	23fe864 <malloc>

023fe18a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe18a:	f000 bb79 	b.w	23fe880 <free>

023fe18e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe18e:	7800      	ldrb	r0, [r0, #0]
 23fe190:	fab0 f080 	clz	r0, r0
 23fe194:	0940      	lsrs	r0, r0, #5
 23fe196:	4770      	bx	lr

023fe198 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe198:	2301      	movs	r3, #1
 23fe19a:	7003      	strb	r3, [r0, #0]
 23fe19c:	4770      	bx	lr

023fe19e <setup>:
For more information see www.ladyada.net/learn/sensors/fsr.html */

int fsrAnalogPin = 0; // FSR is connected to analog 0
int fsrReading;      // the analog reading from the FSR resistor divider
 
void setup(void) {
 23fe19e:	b508      	push	{r3, lr}
  Serial.begin(9600);   // We'll send debugging information via the Serial monitor
 23fe1a0:	f001 fa72 	bl	23ff688 <_Z16_fetch_usbserialv>
}
 23fe1a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);   // We'll send debugging information via the Serial monitor
 23fe1a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe1ac:	f001 ba60 	b.w	23ff670 <_ZN9USBSerial5beginEl>

023fe1b0 <loop>:
 
void loop(void) {
 23fe1b0:	b570      	push	{r4, r5, r6, lr}
  fsrReading = analogRead(fsrAnalogPin);
 23fe1b2:	4b2f      	ldr	r3, [pc, #188]	; (23fe270 <loop+0xc0>)
void loop(void) {
 23fe1b4:	b08e      	sub	sp, #56	; 0x38
  fsrReading = analogRead(fsrAnalogPin);
 23fe1b6:	8818      	ldrh	r0, [r3, #0]
 23fe1b8:	f001 fbfa 	bl	23ff9b0 <analogRead>
 23fe1bc:	4e2d      	ldr	r6, [pc, #180]	; (23fe274 <loop+0xc4>)
 23fe1be:	6030      	str	r0, [r6, #0]
  Serial.print("Analog reading = ");
 23fe1c0:	f001 fa62 	bl	23ff688 <_Z16_fetch_usbserialv>
 23fe1c4:	492c      	ldr	r1, [pc, #176]	; (23fe278 <loop+0xc8>)
 23fe1c6:	f001 f877 	bl	23ff2b8 <_ZN5Print5printEPKc>
  Serial.println(fsrReading);
 23fe1ca:	f001 fa5d 	bl	23ff688 <_Z16_fetch_usbserialv>
 23fe1ce:	6834      	ldr	r4, [r6, #0]
 23fe1d0:	4605      	mov	r5, r0
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fe1d2:	2c00      	cmp	r4, #0
 23fe1d4:	da49      	bge.n	23fe26a <loop+0xba>
            t = print('-');
 23fe1d6:	212d      	movs	r1, #45	; 0x2d
 23fe1d8:	f001 f872 	bl	23ff2c0 <_ZN5Print5printEc>
            val = -n;
 23fe1dc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe1de:	220a      	movs	r2, #10
 23fe1e0:	4628      	mov	r0, r5
 23fe1e2:	f001 f87c 	bl	23ff2de <_ZN5Print11printNumberEmh>
        n += println();
 23fe1e6:	4628      	mov	r0, r5
 23fe1e8:	f001 f86d 	bl	23ff2c6 <_ZN5Print7printlnEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 23fe1ec:	4923      	ldr	r1, [pc, #140]	; (23fe27c <loop+0xcc>)
 23fe1ee:	a80a      	add	r0, sp, #40	; 0x28
 23fe1f0:	f001 f8ef 	bl	23ff3d2 <_ZN6StringC1EPK19__FlashStringHelper>
 
  // we'll need to change the range from the analog reading (0-1023) down to the range
  // used by analogWrite (0-255) with map!

  String sensorVal = "{ analogread: " + String(fsrReading) + " }";
 23fe1f4:	220a      	movs	r2, #10
 23fe1f6:	6831      	ldr	r1, [r6, #0]
 23fe1f8:	a806      	add	r0, sp, #24
 23fe1fa:	f001 f92a 	bl	23ff452 <_ZN6StringC1Eih>
 23fe1fe:	a906      	add	r1, sp, #24
 23fe200:	a80a      	add	r0, sp, #40	; 0x28
 23fe202:	f001 f950 	bl	23ff4a6 <_ZplRK15StringSumHelperRK6String>
 23fe206:	491e      	ldr	r1, [pc, #120]	; (23fe280 <loop+0xd0>)
 23fe208:	f001 f959 	bl	23ff4be <_ZplRK15StringSumHelperPKc>
 23fe20c:	4601      	mov	r1, r0
 23fe20e:	a802      	add	r0, sp, #8
 23fe210:	f001 f902 	bl	23ff418 <_ZN6StringC1ERKS_>
 23fe214:	a806      	add	r0, sp, #24
 23fe216:	f001 f891 	bl	23ff33c <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fe21a:	a80a      	add	r0, sp, #40	; 0x28
 23fe21c:	f001 f88e 	bl	23ff33c <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fe220:	4b18      	ldr	r3, [pc, #96]	; (23fe284 <loop+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fe222:	9a02      	ldr	r2, [sp, #8]
 23fe224:	781b      	ldrb	r3, [r3, #0]
 23fe226:	4918      	ldr	r1, [pc, #96]	; (23fe288 <loop+0xd8>)
 23fe228:	f88d 3000 	strb.w	r3, [sp]
 23fe22c:	a80a      	add	r0, sp, #40	; 0x28
 23fe22e:	233c      	movs	r3, #60	; 0x3c
 23fe230:	f000 fcf6 	bl	23fec20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fe234:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fe236:	b17c      	cbz	r4, 23fe258 <loop+0xa8>
      if (--_M_use_count == 0)
 23fe238:	6863      	ldr	r3, [r4, #4]
 23fe23a:	3b01      	subs	r3, #1
 23fe23c:	6063      	str	r3, [r4, #4]
 23fe23e:	b95b      	cbnz	r3, 23fe258 <loop+0xa8>
          _M_dispose();
 23fe240:	6823      	ldr	r3, [r4, #0]
 23fe242:	4620      	mov	r0, r4
 23fe244:	689b      	ldr	r3, [r3, #8]
 23fe246:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe248:	68a3      	ldr	r3, [r4, #8]
 23fe24a:	3b01      	subs	r3, #1
 23fe24c:	60a3      	str	r3, [r4, #8]
 23fe24e:	b91b      	cbnz	r3, 23fe258 <loop+0xa8>
            _M_destroy();
 23fe250:	6823      	ldr	r3, [r4, #0]
 23fe252:	4620      	mov	r0, r4
 23fe254:	68db      	ldr	r3, [r3, #12]
 23fe256:	4798      	blx	r3
  Particle.publish("sensorval", sensorVal);
  delay(3000);
 23fe258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 23fe25c:	f000 fb64 	bl	23fe928 <delay>
  String sensorVal = "{ analogread: " + String(fsrReading) + " }";
 23fe260:	a802      	add	r0, sp, #8
 23fe262:	f001 f86b 	bl	23ff33c <_ZN6StringD1Ev>
 23fe266:	b00e      	add	sp, #56	; 0x38
 23fe268:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23fe26a:	4621      	mov	r1, r4
 23fe26c:	e7b7      	b.n	23fe1de <loop+0x2e>
 23fe26e:	bf00      	nop
 23fe270:	1007ae78 	.word	0x1007ae78
 23fe274:	1007ae7c 	.word	0x1007ae7c
 23fe278:	023ffd9c 	.word	0x023ffd9c
 23fe27c:	023ffdae 	.word	0x023ffdae
 23fe280:	023ffdbd 	.word	0x023ffdbd
 23fe284:	1007ae74 	.word	0x1007ae74
 23fe288:	023ffdc0 	.word	0x023ffdc0

023fe28c <_GLOBAL__sub_I_fsrAnalogPin>:
        val_(val) {
 23fe28c:	2200      	movs	r2, #0
 23fe28e:	4b01      	ldr	r3, [pc, #4]	; (23fe294 <_GLOBAL__sub_I_fsrAnalogPin+0x8>)
 23fe290:	701a      	strb	r2, [r3, #0]
 23fe292:	4770      	bx	lr
 23fe294:	1007ae74 	.word	0x1007ae74

023fe298 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe298:	b509      	push	{r0, r3, lr}
 23fe29a:	4804      	ldr	r0, [pc, #16]	; (23fe2ac <os_mutex_recursive_create+0x14>)
 23fe29c:	6800      	ldr	r0, [r0, #0]
 23fe29e:	4b04      	ldr	r3, [pc, #16]	; (23fe2b0 <os_mutex_recursive_create+0x18>)
 23fe2a0:	4403      	add	r3, r0
 23fe2a2:	681b      	ldr	r3, [r3, #0]
 23fe2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe2a6:	9302      	str	r3, [sp, #8]
 23fe2a8:	bd09      	pop	{r0, r3, pc}
 23fe2aa:	0000      	.short	0x0000
 23fe2ac:	1007ae04 	.word	0x1007ae04
 23fe2b0:	00000030 	.word	0x00000030

023fe2b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe2b4:	b509      	push	{r0, r3, lr}
 23fe2b6:	4804      	ldr	r0, [pc, #16]	; (23fe2c8 <HAL_RNG_GetRandomNumber+0x14>)
 23fe2b8:	6800      	ldr	r0, [r0, #0]
 23fe2ba:	4b04      	ldr	r3, [pc, #16]	; (23fe2cc <HAL_RNG_GetRandomNumber+0x18>)
 23fe2bc:	4403      	add	r3, r0
 23fe2be:	681b      	ldr	r3, [r3, #0]
 23fe2c0:	685b      	ldr	r3, [r3, #4]
 23fe2c2:	9302      	str	r3, [sp, #8]
 23fe2c4:	bd09      	pop	{r0, r3, pc}
 23fe2c6:	0000      	.short	0x0000
 23fe2c8:	1007ae04 	.word	0x1007ae04
 23fe2cc:	00000000 	.word	0x00000000

023fe2d0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe2d0:	b509      	push	{r0, r3, lr}
 23fe2d2:	4804      	ldr	r0, [pc, #16]	; (23fe2e4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe2d4:	6800      	ldr	r0, [r0, #0]
 23fe2d6:	4b04      	ldr	r3, [pc, #16]	; (23fe2e8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe2d8:	4403      	add	r3, r0
 23fe2da:	681b      	ldr	r3, [r3, #0]
 23fe2dc:	695b      	ldr	r3, [r3, #20]
 23fe2de:	9302      	str	r3, [sp, #8]
 23fe2e0:	bd09      	pop	{r0, r3, pc}
 23fe2e2:	0000      	.short	0x0000
 23fe2e4:	1007ae04 	.word	0x1007ae04
 23fe2e8:	00000000 	.word	0x00000000

023fe2ec <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe2ec:	b509      	push	{r0, r3, lr}
 23fe2ee:	4804      	ldr	r0, [pc, #16]	; (23fe300 <hal_pin_validate_function+0x14>)
 23fe2f0:	6800      	ldr	r0, [r0, #0]
 23fe2f2:	4b04      	ldr	r3, [pc, #16]	; (23fe304 <hal_pin_validate_function+0x18>)
 23fe2f4:	4403      	add	r3, r0
 23fe2f6:	681b      	ldr	r3, [r3, #0]
 23fe2f8:	685b      	ldr	r3, [r3, #4]
 23fe2fa:	9302      	str	r3, [sp, #8]
 23fe2fc:	bd09      	pop	{r0, r3, pc}
 23fe2fe:	0000      	.short	0x0000
 23fe300:	1007ae04 	.word	0x1007ae04
 23fe304:	00000014 	.word	0x00000014

023fe308 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fe308:	b509      	push	{r0, r3, lr}
 23fe30a:	4804      	ldr	r0, [pc, #16]	; (23fe31c <hal_adc_read+0x14>)
 23fe30c:	6800      	ldr	r0, [r0, #0]
 23fe30e:	4b04      	ldr	r3, [pc, #16]	; (23fe320 <hal_adc_read+0x18>)
 23fe310:	4403      	add	r3, r0
 23fe312:	681b      	ldr	r3, [r3, #0]
 23fe314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe316:	9302      	str	r3, [sp, #8]
 23fe318:	bd09      	pop	{r0, r3, pc}
 23fe31a:	0000      	.short	0x0000
 23fe31c:	1007ae04 	.word	0x1007ae04
 23fe320:	00000014 	.word	0x00000014

023fe324 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe324:	b509      	push	{r0, r3, lr}
 23fe326:	4804      	ldr	r0, [pc, #16]	; (23fe338 <hal_i2c_write+0x14>)
 23fe328:	6800      	ldr	r0, [r0, #0]
 23fe32a:	4b04      	ldr	r3, [pc, #16]	; (23fe33c <hal_i2c_write+0x18>)
 23fe32c:	4403      	add	r3, r0
 23fe32e:	681b      	ldr	r3, [r3, #0]
 23fe330:	6a1b      	ldr	r3, [r3, #32]
 23fe332:	9302      	str	r3, [sp, #8]
 23fe334:	bd09      	pop	{r0, r3, pc}
 23fe336:	0000      	.short	0x0000
 23fe338:	1007ae04 	.word	0x1007ae04
 23fe33c:	00000010 	.word	0x00000010

023fe340 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe340:	b509      	push	{r0, r3, lr}
 23fe342:	4804      	ldr	r0, [pc, #16]	; (23fe354 <hal_i2c_available+0x14>)
 23fe344:	6800      	ldr	r0, [r0, #0]
 23fe346:	4b04      	ldr	r3, [pc, #16]	; (23fe358 <hal_i2c_available+0x18>)
 23fe348:	4403      	add	r3, r0
 23fe34a:	681b      	ldr	r3, [r3, #0]
 23fe34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe34e:	9302      	str	r3, [sp, #8]
 23fe350:	bd09      	pop	{r0, r3, pc}
 23fe352:	0000      	.short	0x0000
 23fe354:	1007ae04 	.word	0x1007ae04
 23fe358:	00000010 	.word	0x00000010

023fe35c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe35c:	b509      	push	{r0, r3, lr}
 23fe35e:	4804      	ldr	r0, [pc, #16]	; (23fe370 <hal_i2c_read+0x14>)
 23fe360:	6800      	ldr	r0, [r0, #0]
 23fe362:	4b04      	ldr	r3, [pc, #16]	; (23fe374 <hal_i2c_read+0x18>)
 23fe364:	4403      	add	r3, r0
 23fe366:	681b      	ldr	r3, [r3, #0]
 23fe368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe36a:	9302      	str	r3, [sp, #8]
 23fe36c:	bd09      	pop	{r0, r3, pc}
 23fe36e:	0000      	.short	0x0000
 23fe370:	1007ae04 	.word	0x1007ae04
 23fe374:	00000010 	.word	0x00000010

023fe378 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe378:	b509      	push	{r0, r3, lr}
 23fe37a:	4804      	ldr	r0, [pc, #16]	; (23fe38c <hal_i2c_peek+0x14>)
 23fe37c:	6800      	ldr	r0, [r0, #0]
 23fe37e:	4b04      	ldr	r3, [pc, #16]	; (23fe390 <hal_i2c_peek+0x18>)
 23fe380:	4403      	add	r3, r0
 23fe382:	681b      	ldr	r3, [r3, #0]
 23fe384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe386:	9302      	str	r3, [sp, #8]
 23fe388:	bd09      	pop	{r0, r3, pc}
 23fe38a:	0000      	.short	0x0000
 23fe38c:	1007ae04 	.word	0x1007ae04
 23fe390:	00000010 	.word	0x00000010

023fe394 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe394:	b509      	push	{r0, r3, lr}
 23fe396:	4804      	ldr	r0, [pc, #16]	; (23fe3a8 <hal_i2c_flush+0x14>)
 23fe398:	6800      	ldr	r0, [r0, #0]
 23fe39a:	4b04      	ldr	r3, [pc, #16]	; (23fe3ac <hal_i2c_flush+0x18>)
 23fe39c:	4403      	add	r3, r0
 23fe39e:	681b      	ldr	r3, [r3, #0]
 23fe3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe3a2:	9302      	str	r3, [sp, #8]
 23fe3a4:	bd09      	pop	{r0, r3, pc}
 23fe3a6:	0000      	.short	0x0000
 23fe3a8:	1007ae04 	.word	0x1007ae04
 23fe3ac:	00000010 	.word	0x00000010

023fe3b0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe3b0:	b509      	push	{r0, r3, lr}
 23fe3b2:	4804      	ldr	r0, [pc, #16]	; (23fe3c4 <hal_i2c_is_enabled+0x14>)
 23fe3b4:	6800      	ldr	r0, [r0, #0]
 23fe3b6:	4b04      	ldr	r3, [pc, #16]	; (23fe3c8 <hal_i2c_is_enabled+0x18>)
 23fe3b8:	4403      	add	r3, r0
 23fe3ba:	681b      	ldr	r3, [r3, #0]
 23fe3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe3be:	9302      	str	r3, [sp, #8]
 23fe3c0:	bd09      	pop	{r0, r3, pc}
 23fe3c2:	0000      	.short	0x0000
 23fe3c4:	1007ae04 	.word	0x1007ae04
 23fe3c8:	00000010 	.word	0x00000010

023fe3cc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe3cc:	b509      	push	{r0, r3, lr}
 23fe3ce:	4804      	ldr	r0, [pc, #16]	; (23fe3e0 <hal_i2c_init+0x14>)
 23fe3d0:	6800      	ldr	r0, [r0, #0]
 23fe3d2:	4b04      	ldr	r3, [pc, #16]	; (23fe3e4 <hal_i2c_init+0x18>)
 23fe3d4:	4403      	add	r3, r0
 23fe3d6:	681b      	ldr	r3, [r3, #0]
 23fe3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe3da:	9302      	str	r3, [sp, #8]
 23fe3dc:	bd09      	pop	{r0, r3, pc}
 23fe3de:	0000      	.short	0x0000
 23fe3e0:	1007ae04 	.word	0x1007ae04
 23fe3e4:	00000010 	.word	0x00000010

023fe3e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe3e8:	b509      	push	{r0, r3, lr}
 23fe3ea:	4804      	ldr	r0, [pc, #16]	; (23fe3fc <inet_inet_ntop+0x14>)
 23fe3ec:	6800      	ldr	r0, [r0, #0]
 23fe3ee:	4b04      	ldr	r3, [pc, #16]	; (23fe400 <inet_inet_ntop+0x18>)
 23fe3f0:	4403      	add	r3, r0
 23fe3f2:	681b      	ldr	r3, [r3, #0]
 23fe3f4:	695b      	ldr	r3, [r3, #20]
 23fe3f6:	9302      	str	r3, [sp, #8]
 23fe3f8:	bd09      	pop	{r0, r3, pc}
 23fe3fa:	0000      	.short	0x0000
 23fe3fc:	1007ae04 	.word	0x1007ae04
 23fe400:	0000004c 	.word	0x0000004c

023fe404 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe404:	b509      	push	{r0, r3, lr}
 23fe406:	4804      	ldr	r0, [pc, #16]	; (23fe418 <netdb_freeaddrinfo+0x14>)
 23fe408:	6800      	ldr	r0, [r0, #0]
 23fe40a:	4b04      	ldr	r3, [pc, #16]	; (23fe41c <netdb_freeaddrinfo+0x18>)
 23fe40c:	4403      	add	r3, r0
 23fe40e:	681b      	ldr	r3, [r3, #0]
 23fe410:	689b      	ldr	r3, [r3, #8]
 23fe412:	9302      	str	r3, [sp, #8]
 23fe414:	bd09      	pop	{r0, r3, pc}
 23fe416:	0000      	.short	0x0000
 23fe418:	1007ae04 	.word	0x1007ae04
 23fe41c:	00000050 	.word	0x00000050

023fe420 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe420:	b509      	push	{r0, r3, lr}
 23fe422:	4804      	ldr	r0, [pc, #16]	; (23fe434 <netdb_getaddrinfo+0x14>)
 23fe424:	6800      	ldr	r0, [r0, #0]
 23fe426:	4b04      	ldr	r3, [pc, #16]	; (23fe438 <netdb_getaddrinfo+0x18>)
 23fe428:	4403      	add	r3, r0
 23fe42a:	681b      	ldr	r3, [r3, #0]
 23fe42c:	68db      	ldr	r3, [r3, #12]
 23fe42e:	9302      	str	r3, [sp, #8]
 23fe430:	bd09      	pop	{r0, r3, pc}
 23fe432:	0000      	.short	0x0000
 23fe434:	1007ae04 	.word	0x1007ae04
 23fe438:	00000050 	.word	0x00000050

023fe43c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe43c:	b509      	push	{r0, r3, lr}
 23fe43e:	4804      	ldr	r0, [pc, #16]	; (23fe450 <hal_spi_init+0x14>)
 23fe440:	6800      	ldr	r0, [r0, #0]
 23fe442:	4b04      	ldr	r3, [pc, #16]	; (23fe454 <hal_spi_init+0x18>)
 23fe444:	4403      	add	r3, r0
 23fe446:	681b      	ldr	r3, [r3, #0]
 23fe448:	69db      	ldr	r3, [r3, #28]
 23fe44a:	9302      	str	r3, [sp, #8]
 23fe44c:	bd09      	pop	{r0, r3, pc}
 23fe44e:	0000      	.short	0x0000
 23fe450:	1007ae04 	.word	0x1007ae04
 23fe454:	00000018 	.word	0x00000018

023fe458 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe458:	b509      	push	{r0, r3, lr}
 23fe45a:	4804      	ldr	r0, [pc, #16]	; (23fe46c <hal_spi_is_enabled+0x14>)
 23fe45c:	6800      	ldr	r0, [r0, #0]
 23fe45e:	4b04      	ldr	r3, [pc, #16]	; (23fe470 <hal_spi_is_enabled+0x18>)
 23fe460:	4403      	add	r3, r0
 23fe462:	681b      	ldr	r3, [r3, #0]
 23fe464:	6a1b      	ldr	r3, [r3, #32]
 23fe466:	9302      	str	r3, [sp, #8]
 23fe468:	bd09      	pop	{r0, r3, pc}
 23fe46a:	0000      	.short	0x0000
 23fe46c:	1007ae04 	.word	0x1007ae04
 23fe470:	00000018 	.word	0x00000018

023fe474 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe474:	b509      	push	{r0, r3, lr}
 23fe476:	4804      	ldr	r0, [pc, #16]	; (23fe488 <hal_usart_write+0x14>)
 23fe478:	6800      	ldr	r0, [r0, #0]
 23fe47a:	4b04      	ldr	r3, [pc, #16]	; (23fe48c <hal_usart_write+0x18>)
 23fe47c:	4403      	add	r3, r0
 23fe47e:	681b      	ldr	r3, [r3, #0]
 23fe480:	68db      	ldr	r3, [r3, #12]
 23fe482:	9302      	str	r3, [sp, #8]
 23fe484:	bd09      	pop	{r0, r3, pc}
 23fe486:	0000      	.short	0x0000
 23fe488:	1007ae04 	.word	0x1007ae04
 23fe48c:	00000024 	.word	0x00000024

023fe490 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe490:	b509      	push	{r0, r3, lr}
 23fe492:	4804      	ldr	r0, [pc, #16]	; (23fe4a4 <hal_usart_available+0x14>)
 23fe494:	6800      	ldr	r0, [r0, #0]
 23fe496:	4b04      	ldr	r3, [pc, #16]	; (23fe4a8 <hal_usart_available+0x18>)
 23fe498:	4403      	add	r3, r0
 23fe49a:	681b      	ldr	r3, [r3, #0]
 23fe49c:	691b      	ldr	r3, [r3, #16]
 23fe49e:	9302      	str	r3, [sp, #8]
 23fe4a0:	bd09      	pop	{r0, r3, pc}
 23fe4a2:	0000      	.short	0x0000
 23fe4a4:	1007ae04 	.word	0x1007ae04
 23fe4a8:	00000024 	.word	0x00000024

023fe4ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe4ac:	b509      	push	{r0, r3, lr}
 23fe4ae:	4804      	ldr	r0, [pc, #16]	; (23fe4c0 <hal_usart_read+0x14>)
 23fe4b0:	6800      	ldr	r0, [r0, #0]
 23fe4b2:	4b04      	ldr	r3, [pc, #16]	; (23fe4c4 <hal_usart_read+0x18>)
 23fe4b4:	4403      	add	r3, r0
 23fe4b6:	681b      	ldr	r3, [r3, #0]
 23fe4b8:	695b      	ldr	r3, [r3, #20]
 23fe4ba:	9302      	str	r3, [sp, #8]
 23fe4bc:	bd09      	pop	{r0, r3, pc}
 23fe4be:	0000      	.short	0x0000
 23fe4c0:	1007ae04 	.word	0x1007ae04
 23fe4c4:	00000024 	.word	0x00000024

023fe4c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe4c8:	b509      	push	{r0, r3, lr}
 23fe4ca:	4804      	ldr	r0, [pc, #16]	; (23fe4dc <hal_usart_peek+0x14>)
 23fe4cc:	6800      	ldr	r0, [r0, #0]
 23fe4ce:	4b04      	ldr	r3, [pc, #16]	; (23fe4e0 <hal_usart_peek+0x18>)
 23fe4d0:	4403      	add	r3, r0
 23fe4d2:	681b      	ldr	r3, [r3, #0]
 23fe4d4:	699b      	ldr	r3, [r3, #24]
 23fe4d6:	9302      	str	r3, [sp, #8]
 23fe4d8:	bd09      	pop	{r0, r3, pc}
 23fe4da:	0000      	.short	0x0000
 23fe4dc:	1007ae04 	.word	0x1007ae04
 23fe4e0:	00000024 	.word	0x00000024

023fe4e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe4e4:	b509      	push	{r0, r3, lr}
 23fe4e6:	4804      	ldr	r0, [pc, #16]	; (23fe4f8 <hal_usart_flush+0x14>)
 23fe4e8:	6800      	ldr	r0, [r0, #0]
 23fe4ea:	4b04      	ldr	r3, [pc, #16]	; (23fe4fc <hal_usart_flush+0x18>)
 23fe4ec:	4403      	add	r3, r0
 23fe4ee:	681b      	ldr	r3, [r3, #0]
 23fe4f0:	69db      	ldr	r3, [r3, #28]
 23fe4f2:	9302      	str	r3, [sp, #8]
 23fe4f4:	bd09      	pop	{r0, r3, pc}
 23fe4f6:	0000      	.short	0x0000
 23fe4f8:	1007ae04 	.word	0x1007ae04
 23fe4fc:	00000024 	.word	0x00000024

023fe500 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe500:	b509      	push	{r0, r3, lr}
 23fe502:	4804      	ldr	r0, [pc, #16]	; (23fe514 <hal_usart_is_enabled+0x14>)
 23fe504:	6800      	ldr	r0, [r0, #0]
 23fe506:	4b04      	ldr	r3, [pc, #16]	; (23fe518 <hal_usart_is_enabled+0x18>)
 23fe508:	4403      	add	r3, r0
 23fe50a:	681b      	ldr	r3, [r3, #0]
 23fe50c:	6a1b      	ldr	r3, [r3, #32]
 23fe50e:	9302      	str	r3, [sp, #8]
 23fe510:	bd09      	pop	{r0, r3, pc}
 23fe512:	0000      	.short	0x0000
 23fe514:	1007ae04 	.word	0x1007ae04
 23fe518:	00000024 	.word	0x00000024

023fe51c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe51c:	b509      	push	{r0, r3, lr}
 23fe51e:	4804      	ldr	r0, [pc, #16]	; (23fe530 <hal_usart_available_data_for_write+0x14>)
 23fe520:	6800      	ldr	r0, [r0, #0]
 23fe522:	4b04      	ldr	r3, [pc, #16]	; (23fe534 <hal_usart_available_data_for_write+0x18>)
 23fe524:	4403      	add	r3, r0
 23fe526:	681b      	ldr	r3, [r3, #0]
 23fe528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe52a:	9302      	str	r3, [sp, #8]
 23fe52c:	bd09      	pop	{r0, r3, pc}
 23fe52e:	0000      	.short	0x0000
 23fe530:	1007ae04 	.word	0x1007ae04
 23fe534:	00000024 	.word	0x00000024

023fe538 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fe538:	b509      	push	{r0, r3, lr}
 23fe53a:	4804      	ldr	r0, [pc, #16]	; (23fe54c <hal_usart_init_ex+0x14>)
 23fe53c:	6800      	ldr	r0, [r0, #0]
 23fe53e:	4b04      	ldr	r3, [pc, #16]	; (23fe550 <hal_usart_init_ex+0x18>)
 23fe540:	4403      	add	r3, r0
 23fe542:	681b      	ldr	r3, [r3, #0]
 23fe544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe546:	9302      	str	r3, [sp, #8]
 23fe548:	bd09      	pop	{r0, r3, pc}
 23fe54a:	0000      	.short	0x0000
 23fe54c:	1007ae04 	.word	0x1007ae04
 23fe550:	00000024 	.word	0x00000024

023fe554 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe554:	b509      	push	{r0, r3, lr}
 23fe556:	4804      	ldr	r0, [pc, #16]	; (23fe568 <HAL_USB_USART_Init+0x14>)
 23fe558:	6800      	ldr	r0, [r0, #0]
 23fe55a:	4b04      	ldr	r3, [pc, #16]	; (23fe56c <HAL_USB_USART_Init+0x18>)
 23fe55c:	4403      	add	r3, r0
 23fe55e:	681b      	ldr	r3, [r3, #0]
 23fe560:	681b      	ldr	r3, [r3, #0]
 23fe562:	9302      	str	r3, [sp, #8]
 23fe564:	bd09      	pop	{r0, r3, pc}
 23fe566:	0000      	.short	0x0000
 23fe568:	1007ae04 	.word	0x1007ae04
 23fe56c:	00000034 	.word	0x00000034

023fe570 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fe570:	b509      	push	{r0, r3, lr}
 23fe572:	4804      	ldr	r0, [pc, #16]	; (23fe584 <HAL_USB_USART_Begin+0x14>)
 23fe574:	6800      	ldr	r0, [r0, #0]
 23fe576:	4b04      	ldr	r3, [pc, #16]	; (23fe588 <HAL_USB_USART_Begin+0x18>)
 23fe578:	4403      	add	r3, r0
 23fe57a:	681b      	ldr	r3, [r3, #0]
 23fe57c:	685b      	ldr	r3, [r3, #4]
 23fe57e:	9302      	str	r3, [sp, #8]
 23fe580:	bd09      	pop	{r0, r3, pc}
 23fe582:	0000      	.short	0x0000
 23fe584:	1007ae04 	.word	0x1007ae04
 23fe588:	00000034 	.word	0x00000034

023fe58c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe58c:	b509      	push	{r0, r3, lr}
 23fe58e:	4804      	ldr	r0, [pc, #16]	; (23fe5a0 <HAL_USB_USART_Available_Data+0x14>)
 23fe590:	6800      	ldr	r0, [r0, #0]
 23fe592:	4b04      	ldr	r3, [pc, #16]	; (23fe5a4 <HAL_USB_USART_Available_Data+0x18>)
 23fe594:	4403      	add	r3, r0
 23fe596:	681b      	ldr	r3, [r3, #0]
 23fe598:	691b      	ldr	r3, [r3, #16]
 23fe59a:	9302      	str	r3, [sp, #8]
 23fe59c:	bd09      	pop	{r0, r3, pc}
 23fe59e:	0000      	.short	0x0000
 23fe5a0:	1007ae04 	.word	0x1007ae04
 23fe5a4:	00000034 	.word	0x00000034

023fe5a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe5a8:	b509      	push	{r0, r3, lr}
 23fe5aa:	4804      	ldr	r0, [pc, #16]	; (23fe5bc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe5ac:	6800      	ldr	r0, [r0, #0]
 23fe5ae:	4b04      	ldr	r3, [pc, #16]	; (23fe5c0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe5b0:	4403      	add	r3, r0
 23fe5b2:	681b      	ldr	r3, [r3, #0]
 23fe5b4:	695b      	ldr	r3, [r3, #20]
 23fe5b6:	9302      	str	r3, [sp, #8]
 23fe5b8:	bd09      	pop	{r0, r3, pc}
 23fe5ba:	0000      	.short	0x0000
 23fe5bc:	1007ae04 	.word	0x1007ae04
 23fe5c0:	00000034 	.word	0x00000034

023fe5c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe5c4:	b509      	push	{r0, r3, lr}
 23fe5c6:	4804      	ldr	r0, [pc, #16]	; (23fe5d8 <HAL_USB_USART_Receive_Data+0x14>)
 23fe5c8:	6800      	ldr	r0, [r0, #0]
 23fe5ca:	4b04      	ldr	r3, [pc, #16]	; (23fe5dc <HAL_USB_USART_Receive_Data+0x18>)
 23fe5cc:	4403      	add	r3, r0
 23fe5ce:	681b      	ldr	r3, [r3, #0]
 23fe5d0:	699b      	ldr	r3, [r3, #24]
 23fe5d2:	9302      	str	r3, [sp, #8]
 23fe5d4:	bd09      	pop	{r0, r3, pc}
 23fe5d6:	0000      	.short	0x0000
 23fe5d8:	1007ae04 	.word	0x1007ae04
 23fe5dc:	00000034 	.word	0x00000034

023fe5e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe5e0:	b509      	push	{r0, r3, lr}
 23fe5e2:	4804      	ldr	r0, [pc, #16]	; (23fe5f4 <HAL_USB_USART_Send_Data+0x14>)
 23fe5e4:	6800      	ldr	r0, [r0, #0]
 23fe5e6:	4b04      	ldr	r3, [pc, #16]	; (23fe5f8 <HAL_USB_USART_Send_Data+0x18>)
 23fe5e8:	4403      	add	r3, r0
 23fe5ea:	681b      	ldr	r3, [r3, #0]
 23fe5ec:	69db      	ldr	r3, [r3, #28]
 23fe5ee:	9302      	str	r3, [sp, #8]
 23fe5f0:	bd09      	pop	{r0, r3, pc}
 23fe5f2:	0000      	.short	0x0000
 23fe5f4:	1007ae04 	.word	0x1007ae04
 23fe5f8:	00000034 	.word	0x00000034

023fe5fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe5fc:	b509      	push	{r0, r3, lr}
 23fe5fe:	4804      	ldr	r0, [pc, #16]	; (23fe610 <HAL_USB_USART_Flush_Data+0x14>)
 23fe600:	6800      	ldr	r0, [r0, #0]
 23fe602:	4b04      	ldr	r3, [pc, #16]	; (23fe614 <HAL_USB_USART_Flush_Data+0x18>)
 23fe604:	4403      	add	r3, r0
 23fe606:	681b      	ldr	r3, [r3, #0]
 23fe608:	6a1b      	ldr	r3, [r3, #32]
 23fe60a:	9302      	str	r3, [sp, #8]
 23fe60c:	bd09      	pop	{r0, r3, pc}
 23fe60e:	0000      	.short	0x0000
 23fe610:	1007ae04 	.word	0x1007ae04
 23fe614:	00000034 	.word	0x00000034

023fe618 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe618:	b509      	push	{r0, r3, lr}
 23fe61a:	4804      	ldr	r0, [pc, #16]	; (23fe62c <set_system_mode+0x14>)
 23fe61c:	6800      	ldr	r0, [r0, #0]
 23fe61e:	4b04      	ldr	r3, [pc, #16]	; (23fe630 <set_system_mode+0x18>)
 23fe620:	4403      	add	r3, r0
 23fe622:	681b      	ldr	r3, [r3, #0]
 23fe624:	685b      	ldr	r3, [r3, #4]
 23fe626:	9302      	str	r3, [sp, #8]
 23fe628:	bd09      	pop	{r0, r3, pc}
 23fe62a:	0000      	.short	0x0000
 23fe62c:	1007ae04 	.word	0x1007ae04
 23fe630:	00000008 	.word	0x00000008

023fe634 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe634:	b509      	push	{r0, r3, lr}
 23fe636:	4804      	ldr	r0, [pc, #16]	; (23fe648 <system_delay_ms+0x14>)
 23fe638:	6800      	ldr	r0, [r0, #0]
 23fe63a:	4b04      	ldr	r3, [pc, #16]	; (23fe64c <system_delay_ms+0x18>)
 23fe63c:	4403      	add	r3, r0
 23fe63e:	681b      	ldr	r3, [r3, #0]
 23fe640:	695b      	ldr	r3, [r3, #20]
 23fe642:	9302      	str	r3, [sp, #8]
 23fe644:	bd09      	pop	{r0, r3, pc}
 23fe646:	0000      	.short	0x0000
 23fe648:	1007ae04 	.word	0x1007ae04
 23fe64c:	00000008 	.word	0x00000008

023fe650 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fe650:	b509      	push	{r0, r3, lr}
 23fe652:	4804      	ldr	r0, [pc, #16]	; (23fe664 <application_thread_current+0x14>)
 23fe654:	6800      	ldr	r0, [r0, #0]
 23fe656:	4b04      	ldr	r3, [pc, #16]	; (23fe668 <application_thread_current+0x18>)
 23fe658:	4403      	add	r3, r0
 23fe65a:	681b      	ldr	r3, [r3, #0]
 23fe65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe65e:	9302      	str	r3, [sp, #8]
 23fe660:	bd09      	pop	{r0, r3, pc}
 23fe662:	0000      	.short	0x0000
 23fe664:	1007ae04 	.word	0x1007ae04
 23fe668:	00000008 	.word	0x00000008

023fe66c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fe66c:	b509      	push	{r0, r3, lr}
 23fe66e:	4804      	ldr	r0, [pc, #16]	; (23fe680 <application_thread_invoke+0x14>)
 23fe670:	6800      	ldr	r0, [r0, #0]
 23fe672:	4b04      	ldr	r3, [pc, #16]	; (23fe684 <application_thread_invoke+0x18>)
 23fe674:	4403      	add	r3, r0
 23fe676:	681b      	ldr	r3, [r3, #0]
 23fe678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe67a:	9302      	str	r3, [sp, #8]
 23fe67c:	bd09      	pop	{r0, r3, pc}
 23fe67e:	0000      	.short	0x0000
 23fe680:	1007ae04 	.word	0x1007ae04
 23fe684:	00000008 	.word	0x00000008

023fe688 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe688:	b509      	push	{r0, r3, lr}
 23fe68a:	4804      	ldr	r0, [pc, #16]	; (23fe69c <system_ctrl_set_app_request_handler+0x14>)
 23fe68c:	6800      	ldr	r0, [r0, #0]
 23fe68e:	4b04      	ldr	r3, [pc, #16]	; (23fe6a0 <system_ctrl_set_app_request_handler+0x18>)
 23fe690:	4403      	add	r3, r0
 23fe692:	681b      	ldr	r3, [r3, #0]
 23fe694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe698:	9302      	str	r3, [sp, #8]
 23fe69a:	bd09      	pop	{r0, r3, pc}
 23fe69c:	1007ae04 	.word	0x1007ae04
 23fe6a0:	00000008 	.word	0x00000008

023fe6a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe6a4:	b509      	push	{r0, r3, lr}
 23fe6a6:	4804      	ldr	r0, [pc, #16]	; (23fe6b8 <system_ctrl_set_result+0x14>)
 23fe6a8:	6800      	ldr	r0, [r0, #0]
 23fe6aa:	4b04      	ldr	r3, [pc, #16]	; (23fe6bc <system_ctrl_set_result+0x18>)
 23fe6ac:	4403      	add	r3, r0
 23fe6ae:	681b      	ldr	r3, [r3, #0]
 23fe6b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe6b4:	9302      	str	r3, [sp, #8]
 23fe6b6:	bd09      	pop	{r0, r3, pc}
 23fe6b8:	1007ae04 	.word	0x1007ae04
 23fe6bc:	00000008 	.word	0x00000008

023fe6c0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe6c0:	b509      	push	{r0, r3, lr}
 23fe6c2:	4804      	ldr	r0, [pc, #16]	; (23fe6d4 <spark_cloud_flag_connected+0x14>)
 23fe6c4:	6800      	ldr	r0, [r0, #0]
 23fe6c6:	4b04      	ldr	r3, [pc, #16]	; (23fe6d8 <spark_cloud_flag_connected+0x18>)
 23fe6c8:	4403      	add	r3, r0
 23fe6ca:	681b      	ldr	r3, [r3, #0]
 23fe6cc:	695b      	ldr	r3, [r3, #20]
 23fe6ce:	9302      	str	r3, [sp, #8]
 23fe6d0:	bd09      	pop	{r0, r3, pc}
 23fe6d2:	0000      	.short	0x0000
 23fe6d4:	1007ae04 	.word	0x1007ae04
 23fe6d8:	0000002c 	.word	0x0000002c

023fe6dc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fe6dc:	b509      	push	{r0, r3, lr}
 23fe6de:	4804      	ldr	r0, [pc, #16]	; (23fe6f0 <spark_send_event+0x14>)
 23fe6e0:	6800      	ldr	r0, [r0, #0]
 23fe6e2:	4b04      	ldr	r3, [pc, #16]	; (23fe6f4 <spark_send_event+0x18>)
 23fe6e4:	4403      	add	r3, r0
 23fe6e6:	681b      	ldr	r3, [r3, #0]
 23fe6e8:	6a1b      	ldr	r3, [r3, #32]
 23fe6ea:	9302      	str	r3, [sp, #8]
 23fe6ec:	bd09      	pop	{r0, r3, pc}
 23fe6ee:	0000      	.short	0x0000
 23fe6f0:	1007ae04 	.word	0x1007ae04
 23fe6f4:	0000002c 	.word	0x0000002c

023fe6f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe6f8:	b509      	push	{r0, r3, lr}
 23fe6fa:	4804      	ldr	r0, [pc, #16]	; (23fe70c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe6fc:	6800      	ldr	r0, [r0, #0]
 23fe6fe:	4b04      	ldr	r3, [pc, #16]	; (23fe710 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe700:	4403      	add	r3, r0
 23fe702:	681b      	ldr	r3, [r3, #0]
 23fe704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe706:	9302      	str	r3, [sp, #8]
 23fe708:	bd09      	pop	{r0, r3, pc}
 23fe70a:	0000      	.short	0x0000
 23fe70c:	1007ae04 	.word	0x1007ae04
 23fe710:	0000002c 	.word	0x0000002c

023fe714 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe714:	b509      	push	{r0, r3, lr}
 23fe716:	4804      	ldr	r0, [pc, #16]	; (23fe728 <network_connect+0x14>)
 23fe718:	6800      	ldr	r0, [r0, #0]
 23fe71a:	4b04      	ldr	r3, [pc, #16]	; (23fe72c <network_connect+0x18>)
 23fe71c:	4403      	add	r3, r0
 23fe71e:	681b      	ldr	r3, [r3, #0]
 23fe720:	685b      	ldr	r3, [r3, #4]
 23fe722:	9302      	str	r3, [sp, #8]
 23fe724:	bd09      	pop	{r0, r3, pc}
 23fe726:	0000      	.short	0x0000
 23fe728:	1007ae04 	.word	0x1007ae04
 23fe72c:	00000028 	.word	0x00000028

023fe730 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe730:	b509      	push	{r0, r3, lr}
 23fe732:	4804      	ldr	r0, [pc, #16]	; (23fe744 <network_connecting+0x14>)
 23fe734:	6800      	ldr	r0, [r0, #0]
 23fe736:	4b04      	ldr	r3, [pc, #16]	; (23fe748 <network_connecting+0x18>)
 23fe738:	4403      	add	r3, r0
 23fe73a:	681b      	ldr	r3, [r3, #0]
 23fe73c:	689b      	ldr	r3, [r3, #8]
 23fe73e:	9302      	str	r3, [sp, #8]
 23fe740:	bd09      	pop	{r0, r3, pc}
 23fe742:	0000      	.short	0x0000
 23fe744:	1007ae04 	.word	0x1007ae04
 23fe748:	00000028 	.word	0x00000028

023fe74c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe74c:	b509      	push	{r0, r3, lr}
 23fe74e:	4804      	ldr	r0, [pc, #16]	; (23fe760 <network_disconnect+0x14>)
 23fe750:	6800      	ldr	r0, [r0, #0]
 23fe752:	4b04      	ldr	r3, [pc, #16]	; (23fe764 <network_disconnect+0x18>)
 23fe754:	4403      	add	r3, r0
 23fe756:	681b      	ldr	r3, [r3, #0]
 23fe758:	68db      	ldr	r3, [r3, #12]
 23fe75a:	9302      	str	r3, [sp, #8]
 23fe75c:	bd09      	pop	{r0, r3, pc}
 23fe75e:	0000      	.short	0x0000
 23fe760:	1007ae04 	.word	0x1007ae04
 23fe764:	00000028 	.word	0x00000028

023fe768 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe768:	b509      	push	{r0, r3, lr}
 23fe76a:	4804      	ldr	r0, [pc, #16]	; (23fe77c <network_ready+0x14>)
 23fe76c:	6800      	ldr	r0, [r0, #0]
 23fe76e:	4b04      	ldr	r3, [pc, #16]	; (23fe780 <network_ready+0x18>)
 23fe770:	4403      	add	r3, r0
 23fe772:	681b      	ldr	r3, [r3, #0]
 23fe774:	691b      	ldr	r3, [r3, #16]
 23fe776:	9302      	str	r3, [sp, #8]
 23fe778:	bd09      	pop	{r0, r3, pc}
 23fe77a:	0000      	.short	0x0000
 23fe77c:	1007ae04 	.word	0x1007ae04
 23fe780:	00000028 	.word	0x00000028

023fe784 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe784:	b509      	push	{r0, r3, lr}
 23fe786:	4804      	ldr	r0, [pc, #16]	; (23fe798 <network_on+0x14>)
 23fe788:	6800      	ldr	r0, [r0, #0]
 23fe78a:	4b04      	ldr	r3, [pc, #16]	; (23fe79c <network_on+0x18>)
 23fe78c:	4403      	add	r3, r0
 23fe78e:	681b      	ldr	r3, [r3, #0]
 23fe790:	695b      	ldr	r3, [r3, #20]
 23fe792:	9302      	str	r3, [sp, #8]
 23fe794:	bd09      	pop	{r0, r3, pc}
 23fe796:	0000      	.short	0x0000
 23fe798:	1007ae04 	.word	0x1007ae04
 23fe79c:	00000028 	.word	0x00000028

023fe7a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe7a0:	b509      	push	{r0, r3, lr}
 23fe7a2:	4804      	ldr	r0, [pc, #16]	; (23fe7b4 <network_off+0x14>)
 23fe7a4:	6800      	ldr	r0, [r0, #0]
 23fe7a6:	4b04      	ldr	r3, [pc, #16]	; (23fe7b8 <network_off+0x18>)
 23fe7a8:	4403      	add	r3, r0
 23fe7aa:	681b      	ldr	r3, [r3, #0]
 23fe7ac:	699b      	ldr	r3, [r3, #24]
 23fe7ae:	9302      	str	r3, [sp, #8]
 23fe7b0:	bd09      	pop	{r0, r3, pc}
 23fe7b2:	0000      	.short	0x0000
 23fe7b4:	1007ae04 	.word	0x1007ae04
 23fe7b8:	00000028 	.word	0x00000028

023fe7bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe7bc:	b509      	push	{r0, r3, lr}
 23fe7be:	4804      	ldr	r0, [pc, #16]	; (23fe7d0 <network_listen+0x14>)
 23fe7c0:	6800      	ldr	r0, [r0, #0]
 23fe7c2:	4b04      	ldr	r3, [pc, #16]	; (23fe7d4 <network_listen+0x18>)
 23fe7c4:	4403      	add	r3, r0
 23fe7c6:	681b      	ldr	r3, [r3, #0]
 23fe7c8:	69db      	ldr	r3, [r3, #28]
 23fe7ca:	9302      	str	r3, [sp, #8]
 23fe7cc:	bd09      	pop	{r0, r3, pc}
 23fe7ce:	0000      	.short	0x0000
 23fe7d0:	1007ae04 	.word	0x1007ae04
 23fe7d4:	00000028 	.word	0x00000028

023fe7d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe7d8:	b509      	push	{r0, r3, lr}
 23fe7da:	4804      	ldr	r0, [pc, #16]	; (23fe7ec <network_listening+0x14>)
 23fe7dc:	6800      	ldr	r0, [r0, #0]
 23fe7de:	4b04      	ldr	r3, [pc, #16]	; (23fe7f0 <network_listening+0x18>)
 23fe7e0:	4403      	add	r3, r0
 23fe7e2:	681b      	ldr	r3, [r3, #0]
 23fe7e4:	6a1b      	ldr	r3, [r3, #32]
 23fe7e6:	9302      	str	r3, [sp, #8]
 23fe7e8:	bd09      	pop	{r0, r3, pc}
 23fe7ea:	0000      	.short	0x0000
 23fe7ec:	1007ae04 	.word	0x1007ae04
 23fe7f0:	00000028 	.word	0x00000028

023fe7f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe7f4:	b509      	push	{r0, r3, lr}
 23fe7f6:	4804      	ldr	r0, [pc, #16]	; (23fe808 <network_set_listen_timeout+0x14>)
 23fe7f8:	6800      	ldr	r0, [r0, #0]
 23fe7fa:	4b04      	ldr	r3, [pc, #16]	; (23fe80c <network_set_listen_timeout+0x18>)
 23fe7fc:	4403      	add	r3, r0
 23fe7fe:	681b      	ldr	r3, [r3, #0]
 23fe800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe802:	9302      	str	r3, [sp, #8]
 23fe804:	bd09      	pop	{r0, r3, pc}
 23fe806:	0000      	.short	0x0000
 23fe808:	1007ae04 	.word	0x1007ae04
 23fe80c:	00000028 	.word	0x00000028

023fe810 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe810:	b509      	push	{r0, r3, lr}
 23fe812:	4804      	ldr	r0, [pc, #16]	; (23fe824 <network_get_listen_timeout+0x14>)
 23fe814:	6800      	ldr	r0, [r0, #0]
 23fe816:	4b04      	ldr	r3, [pc, #16]	; (23fe828 <network_get_listen_timeout+0x18>)
 23fe818:	4403      	add	r3, r0
 23fe81a:	681b      	ldr	r3, [r3, #0]
 23fe81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe81e:	9302      	str	r3, [sp, #8]
 23fe820:	bd09      	pop	{r0, r3, pc}
 23fe822:	0000      	.short	0x0000
 23fe824:	1007ae04 	.word	0x1007ae04
 23fe828:	00000028 	.word	0x00000028

023fe82c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe82c:	b509      	push	{r0, r3, lr}
 23fe82e:	4804      	ldr	r0, [pc, #16]	; (23fe840 <network_is_on+0x14>)
 23fe830:	6800      	ldr	r0, [r0, #0]
 23fe832:	4b04      	ldr	r3, [pc, #16]	; (23fe844 <network_is_on+0x18>)
 23fe834:	4403      	add	r3, r0
 23fe836:	681b      	ldr	r3, [r3, #0]
 23fe838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe83a:	9302      	str	r3, [sp, #8]
 23fe83c:	bd09      	pop	{r0, r3, pc}
 23fe83e:	0000      	.short	0x0000
 23fe840:	1007ae04 	.word	0x1007ae04
 23fe844:	00000028 	.word	0x00000028

023fe848 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe848:	b509      	push	{r0, r3, lr}
 23fe84a:	4804      	ldr	r0, [pc, #16]	; (23fe85c <network_is_off+0x14>)
 23fe84c:	6800      	ldr	r0, [r0, #0]
 23fe84e:	4b04      	ldr	r3, [pc, #16]	; (23fe860 <network_is_off+0x18>)
 23fe850:	4403      	add	r3, r0
 23fe852:	681b      	ldr	r3, [r3, #0]
 23fe854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe856:	9302      	str	r3, [sp, #8]
 23fe858:	bd09      	pop	{r0, r3, pc}
 23fe85a:	0000      	.short	0x0000
 23fe85c:	1007ae04 	.word	0x1007ae04
 23fe860:	00000028 	.word	0x00000028

023fe864 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe864:	b509      	push	{r0, r3, lr}
 23fe866:	4804      	ldr	r0, [pc, #16]	; (23fe878 <malloc+0x14>)
 23fe868:	6800      	ldr	r0, [r0, #0]
 23fe86a:	4b04      	ldr	r3, [pc, #16]	; (23fe87c <malloc+0x18>)
 23fe86c:	4403      	add	r3, r0
 23fe86e:	681b      	ldr	r3, [r3, #0]
 23fe870:	681b      	ldr	r3, [r3, #0]
 23fe872:	9302      	str	r3, [sp, #8]
 23fe874:	bd09      	pop	{r0, r3, pc}
 23fe876:	0000      	.short	0x0000
 23fe878:	1007ae04 	.word	0x1007ae04
 23fe87c:	00000004 	.word	0x00000004

023fe880 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe880:	b509      	push	{r0, r3, lr}
 23fe882:	4804      	ldr	r0, [pc, #16]	; (23fe894 <free+0x14>)
 23fe884:	6800      	ldr	r0, [r0, #0]
 23fe886:	4b04      	ldr	r3, [pc, #16]	; (23fe898 <free+0x18>)
 23fe888:	4403      	add	r3, r0
 23fe88a:	681b      	ldr	r3, [r3, #0]
 23fe88c:	685b      	ldr	r3, [r3, #4]
 23fe88e:	9302      	str	r3, [sp, #8]
 23fe890:	bd09      	pop	{r0, r3, pc}
 23fe892:	0000      	.short	0x0000
 23fe894:	1007ae04 	.word	0x1007ae04
 23fe898:	00000004 	.word	0x00000004

023fe89c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe89c:	b509      	push	{r0, r3, lr}
 23fe89e:	4804      	ldr	r0, [pc, #16]	; (23fe8b0 <realloc+0x14>)
 23fe8a0:	6800      	ldr	r0, [r0, #0]
 23fe8a2:	4b04      	ldr	r3, [pc, #16]	; (23fe8b4 <realloc+0x18>)
 23fe8a4:	4403      	add	r3, r0
 23fe8a6:	681b      	ldr	r3, [r3, #0]
 23fe8a8:	689b      	ldr	r3, [r3, #8]
 23fe8aa:	9302      	str	r3, [sp, #8]
 23fe8ac:	bd09      	pop	{r0, r3, pc}
 23fe8ae:	0000      	.short	0x0000
 23fe8b0:	1007ae04 	.word	0x1007ae04
 23fe8b4:	00000004 	.word	0x00000004

023fe8b8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fe8b8:	b509      	push	{r0, r3, lr}
 23fe8ba:	4804      	ldr	r0, [pc, #16]	; (23fe8cc <abort+0x14>)
 23fe8bc:	6800      	ldr	r0, [r0, #0]
 23fe8be:	4b04      	ldr	r3, [pc, #16]	; (23fe8d0 <abort+0x18>)
 23fe8c0:	4403      	add	r3, r0
 23fe8c2:	681b      	ldr	r3, [r3, #0]
 23fe8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe8c6:	9302      	str	r3, [sp, #8]
 23fe8c8:	bd09      	pop	{r0, r3, pc}
 23fe8ca:	0000      	.short	0x0000
 23fe8cc:	1007ae04 	.word	0x1007ae04
 23fe8d0:	00000004 	.word	0x00000004

023fe8d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fe8d4:	b509      	push	{r0, r3, lr}
 23fe8d6:	4804      	ldr	r0, [pc, #16]	; (23fe8e8 <_malloc_r+0x14>)
 23fe8d8:	6800      	ldr	r0, [r0, #0]
 23fe8da:	4b04      	ldr	r3, [pc, #16]	; (23fe8ec <_malloc_r+0x18>)
 23fe8dc:	4403      	add	r3, r0
 23fe8de:	681b      	ldr	r3, [r3, #0]
 23fe8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe8e2:	9302      	str	r3, [sp, #8]
 23fe8e4:	bd09      	pop	{r0, r3, pc}
 23fe8e6:	0000      	.short	0x0000
 23fe8e8:	1007ae04 	.word	0x1007ae04
 23fe8ec:	00000004 	.word	0x00000004

023fe8f0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe8f0:	b509      	push	{r0, r3, lr}
 23fe8f2:	4804      	ldr	r0, [pc, #16]	; (23fe904 <__assert_func+0x14>)
 23fe8f4:	6800      	ldr	r0, [r0, #0]
 23fe8f6:	4b04      	ldr	r3, [pc, #16]	; (23fe908 <__assert_func+0x18>)
 23fe8f8:	4403      	add	r3, r0
 23fe8fa:	681b      	ldr	r3, [r3, #0]
 23fe8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe8fe:	9302      	str	r3, [sp, #8]
 23fe900:	bd09      	pop	{r0, r3, pc}
 23fe902:	0000      	.short	0x0000
 23fe904:	1007ae04 	.word	0x1007ae04
 23fe908:	00000004 	.word	0x00000004

023fe90c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe90c:	b509      	push	{r0, r3, lr}
 23fe90e:	4804      	ldr	r0, [pc, #16]	; (23fe920 <newlib_impure_ptr_callback+0x14>)
 23fe910:	6800      	ldr	r0, [r0, #0]
 23fe912:	4b04      	ldr	r3, [pc, #16]	; (23fe924 <newlib_impure_ptr_callback+0x18>)
 23fe914:	4403      	add	r3, r0
 23fe916:	681b      	ldr	r3, [r3, #0]
 23fe918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe91a:	9302      	str	r3, [sp, #8]
 23fe91c:	bd09      	pop	{r0, r3, pc}
 23fe91e:	0000      	.short	0x0000
 23fe920:	1007ae04 	.word	0x1007ae04
 23fe924:	00000004 	.word	0x00000004

023fe928 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe928:	2100      	movs	r1, #0
 23fe92a:	f7ff be83 	b.w	23fe634 <system_delay_ms>

023fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fe92e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fe930:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fe932:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fe934:	b17c      	cbz	r4, 23fe956 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fe936:	6863      	ldr	r3, [r4, #4]
 23fe938:	3b01      	subs	r3, #1
 23fe93a:	6063      	str	r3, [r4, #4]
 23fe93c:	b95b      	cbnz	r3, 23fe956 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fe93e:	6823      	ldr	r3, [r4, #0]
 23fe940:	4620      	mov	r0, r4
 23fe942:	689b      	ldr	r3, [r3, #8]
 23fe944:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fe946:	68a3      	ldr	r3, [r4, #8]
 23fe948:	3b01      	subs	r3, #1
 23fe94a:	60a3      	str	r3, [r4, #8]
 23fe94c:	b91b      	cbnz	r3, 23fe956 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fe94e:	6823      	ldr	r3, [r4, #0]
 23fe950:	4620      	mov	r0, r4
 23fe952:	68db      	ldr	r3, [r3, #12]
 23fe954:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fe956:	4628      	mov	r0, r5
 23fe958:	bd38      	pop	{r3, r4, r5, pc}

023fe95a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe95a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe95c:	6883      	ldr	r3, [r0, #8]
 23fe95e:	4604      	mov	r4, r0
 23fe960:	b90b      	cbnz	r3, 23fe966 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe962:	f001 f939 	bl	23ffbd8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe966:	68c3      	ldr	r3, [r0, #12]
 23fe968:	4798      	blx	r3
      if (_M_manager)
 23fe96a:	68a3      	ldr	r3, [r4, #8]
 23fe96c:	b11b      	cbz	r3, 23fe976 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe96e:	2203      	movs	r2, #3
 23fe970:	4621      	mov	r1, r4
 23fe972:	4620      	mov	r0, r4
 23fe974:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe976:	4620      	mov	r0, r4
}
 23fe978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe97c:	2110      	movs	r1, #16
 23fe97e:	f7ff bc04 	b.w	23fe18a <_ZdlPvj>

023fe982 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fe982:	b510      	push	{r4, lr}
      if (_M_manager)
 23fe984:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fe986:	4604      	mov	r4, r0
      if (_M_manager)
 23fe988:	b113      	cbz	r3, 23fe990 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe98a:	2203      	movs	r2, #3
 23fe98c:	4601      	mov	r1, r0
 23fe98e:	4798      	blx	r3
    }
 23fe990:	4620      	mov	r0, r4
 23fe992:	bd10      	pop	{r4, pc}

023fe994 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fe994:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe996:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fe998:	460b      	mov	r3, r1
 23fe99a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe99c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe9a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fe9a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fe9a8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fe9ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fe9b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fe9b4:	b002      	add	sp, #8
 23fe9b6:	bd10      	pop	{r4, pc}

023fe9b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe9b8:	2300      	movs	r3, #0
 23fe9ba:	4802      	ldr	r0, [pc, #8]	; (23fe9c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe9bc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe9be:	f7ff bc6b 	b.w	23fe298 <os_mutex_recursive_create>
 23fe9c2:	bf00      	nop
 23fe9c4:	1007ae80 	.word	0x1007ae80

023fe9c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe9c8:	4770      	bx	lr

023fe9ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fe9ca:	2000      	movs	r0, #0
 23fe9cc:	4770      	bx	lr

023fe9ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe9ce:	b510      	push	{r4, lr}
 23fe9d0:	4604      	mov	r4, r0
 23fe9d2:	2110      	movs	r1, #16
 23fe9d4:	f7ff fbd9 	bl	23fe18a <_ZdlPvj>
 23fe9d8:	4620      	mov	r0, r4
 23fe9da:	bd10      	pop	{r4, pc}

023fe9dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fe9dc:	b508      	push	{r3, lr}
      { delete this; }
 23fe9de:	f7ff fff6 	bl	23fe9ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fe9e2:	bd08      	pop	{r3, pc}

023fe9e4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fe9e4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fe9e6:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fe9e8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fe9ec:	6002      	str	r2, [r0, #0]
 23fe9ee:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe9f0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe9f2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe9f4:	680c      	ldr	r4, [r1, #0]
 23fe9f6:	8085      	strh	r5, [r0, #4]
 23fe9f8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe9fa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fe9fc:	bd30      	pop	{r4, r5, pc}

023fe9fe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fe9fe:	b510      	push	{r4, lr}
 23fea00:	4604      	mov	r4, r0
    free((void*)msg_);
 23fea02:	6800      	ldr	r0, [r0, #0]
 23fea04:	f7ff ff3c 	bl	23fe880 <free>
}
 23fea08:	4620      	mov	r0, r4
 23fea0a:	bd10      	pop	{r4, pc}

023fea0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fea0c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fea0e:	68c4      	ldr	r4, [r0, #12]
 23fea10:	b314      	cbz	r4, 23fea58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fea12:	7823      	ldrb	r3, [r4, #0]
 23fea14:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fea16:	2b02      	cmp	r3, #2
 23fea18:	d103      	bne.n	23fea22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fea1a:	f104 000c 	add.w	r0, r4, #12
 23fea1e:	f7ff ffee 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fea22:	1d23      	adds	r3, r4, #4
 23fea24:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fea26:	b135      	cbz	r5, 23fea36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fea28:	4628      	mov	r0, r5
 23fea2a:	f7ff ffaa 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
 23fea2e:	2110      	movs	r1, #16
 23fea30:	4628      	mov	r0, r5
 23fea32:	f7ff fbaa 	bl	23fe18a <_ZdlPvj>
 23fea36:	f104 0308 	add.w	r3, r4, #8
 23fea3a:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fea3c:	b135      	cbz	r5, 23fea4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fea3e:	4628      	mov	r0, r5
 23fea40:	f7ff ff9f 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
 23fea44:	2110      	movs	r1, #16
 23fea46:	4628      	mov	r0, r5
 23fea48:	f7ff fb9f 	bl	23fe18a <_ZdlPvj>
 23fea4c:	4620      	mov	r0, r4
 23fea4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fea52:	2114      	movs	r1, #20
 23fea54:	f7ff bb99 	b.w	23fe18a <_ZdlPvj>
 23fea58:	bd38      	pop	{r3, r4, r5, pc}

023fea5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea5a:	680b      	ldr	r3, [r1, #0]
 23fea5c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fea5e:	684b      	ldr	r3, [r1, #4]
 23fea60:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fea62:	b113      	cbz	r3, 23fea6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fea64:	685a      	ldr	r2, [r3, #4]
 23fea66:	3201      	adds	r2, #1
 23fea68:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fea6a:	4770      	bx	lr

023fea6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fea6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fea6e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fea70:	4668      	mov	r0, sp
 23fea72:	460d      	mov	r5, r1
 23fea74:	f7ff fff1 	bl	23fea5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea78:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fea7a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea7c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fea7e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fea80:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fea82:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fea84:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fea86:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fea88:	f7ff ff51 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fea8c:	b135      	cbz	r5, 23fea9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fea8e:	1d28      	adds	r0, r5, #4
 23fea90:	f7ff ff4d 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea94:	2108      	movs	r1, #8
 23fea96:	4628      	mov	r0, r5
 23fea98:	f7ff fb77 	bl	23fe18a <_ZdlPvj>
        return p;
    }
 23fea9c:	4620      	mov	r0, r4
 23fea9e:	b003      	add	sp, #12
 23feaa0:	bd30      	pop	{r4, r5, pc}

023feaa2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23feaa2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23feaa4:	b510      	push	{r4, lr}
      if (_M_empty())
 23feaa6:	b90a      	cbnz	r2, 23feaac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23feaa8:	f001 f896 	bl	23ffbd8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feaac:	68c3      	ldr	r3, [r0, #12]
    }
 23feaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feab2:	4718      	bx	r3

023feab4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23feab4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23feab6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23feab8:	f100 0110 	add.w	r1, r0, #16
 23feabc:	f7ff fff1 	bl	23feaa2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23feac0:	bd08      	pop	{r3, pc}

023feac2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23feac2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23feac4:	b510      	push	{r4, lr}
      if (_M_empty())
 23feac6:	b90a      	cbnz	r2, 23feacc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23feac8:	f001 f886 	bl	23ffbd8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23feacc:	68c3      	ldr	r3, [r0, #12]
    }
 23feace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fead2:	4718      	bx	r3

023fead4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fead4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fead6:	6800      	ldr	r0, [r0, #0]
 23fead8:	f100 0110 	add.w	r1, r0, #16
 23feadc:	f7ff fff1 	bl	23feac2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23feae0:	bd08      	pop	{r3, pc}
	...

023feae4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23feae4:	b538      	push	{r3, r4, r5, lr}
 23feae6:	2300      	movs	r3, #0
 23feae8:	4604      	mov	r4, r0
 23feaea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feaec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23feaee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feaf0:	f7ff fb47 	bl	23fe182 <_Znwj>
 23feaf4:	b128      	cbz	r0, 23feb02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23feaf6:	2301      	movs	r3, #1
 23feaf8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23feafc:	4b02      	ldr	r3, [pc, #8]	; (23feb08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23feafe:	60c5      	str	r5, [r0, #12]
 23feb00:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23feb02:	6020      	str	r0, [r4, #0]
	}
 23feb04:	4620      	mov	r0, r4
 23feb06:	bd38      	pop	{r3, r4, r5, pc}
 23feb08:	023ffdd4 	.word	0x023ffdd4

023feb0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23feb0c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23feb0e:	2300      	movs	r3, #0
 23feb10:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23feb12:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feb14:	4604      	mov	r4, r0
 23feb16:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feb18:	b12b      	cbz	r3, 23feb26 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feb1a:	2202      	movs	r2, #2
 23feb1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23feb1e:	68eb      	ldr	r3, [r5, #12]
 23feb20:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feb22:	68ab      	ldr	r3, [r5, #8]
 23feb24:	60a3      	str	r3, [r4, #8]
    }
 23feb26:	4620      	mov	r0, r4
 23feb28:	bd38      	pop	{r3, r4, r5, pc}
	...

023feb2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23feb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23feb2e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23feb30:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23feb32:	4668      	mov	r0, sp
 23feb34:	f7ff ff56 	bl	23fe9e4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23feb38:	f04f 0302 	mov.w	r3, #2
 23feb3c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23feb40:	2a00      	cmp	r2, #0
 23feb42:	d103      	bne.n	23feb4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23feb44:	e8c4 3f41 	strexb	r1, r3, [r4]
 23feb48:	2900      	cmp	r1, #0
 23feb4a:	d1f7      	bne.n	23feb3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23feb4c:	d121      	bne.n	23feb92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23feb4e:	f104 050c 	add.w	r5, r4, #12
 23feb52:	4669      	mov	r1, sp
 23feb54:	4628      	mov	r0, r5
 23feb56:	f7ff ff45 	bl	23fe9e4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23feb5a:	2201      	movs	r2, #1
 23feb5c:	1c63      	adds	r3, r4, #1
 23feb5e:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23feb62:	2000      	movs	r0, #0
 23feb64:	f104 0308 	add.w	r3, r4, #8
 23feb68:	e8d3 6fef 	ldaex	r6, [r3]
 23feb6c:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23feb70:	2a00      	cmp	r2, #0
 23feb72:	d1f9      	bne.n	23feb68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23feb74:	b16e      	cbz	r6, 23feb92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23feb76:	f7ff fd6b 	bl	23fe650 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23feb7a:	b178      	cbz	r0, 23feb9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23feb7c:	4629      	mov	r1, r5
 23feb7e:	4630      	mov	r0, r6
 23feb80:	f7ff ff8f 	bl	23feaa2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23feb84:	4630      	mov	r0, r6
 23feb86:	f7ff fefc 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feb8a:	2110      	movs	r1, #16
 23feb8c:	4630      	mov	r0, r6
 23feb8e:	f7ff fafc 	bl	23fe18a <_ZdlPvj>
        p_->setError(std::move(error));
 23feb92:	4668      	mov	r0, sp
 23feb94:	f7ff ff33 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
    }
 23feb98:	b009      	add	sp, #36	; 0x24
 23feb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23feb9c:	4631      	mov	r1, r6
 23feb9e:	a802      	add	r0, sp, #8
 23feba0:	f7ff ffb4 	bl	23feb0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23feba4:	68e0      	ldr	r0, [r4, #12]
 23feba6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23febaa:	b108      	cbz	r0, 23febb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23febac:	f001 f868 	bl	23ffc80 <strdup>
        type_(type) {
 23febb0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23febb2:	2010      	movs	r0, #16
 23febb4:	f8ad 501c 	strh.w	r5, [sp, #28]
 23febb8:	f7ff fae3 	bl	23fe182 <_Znwj>
 23febbc:	4605      	mov	r5, r0
 23febbe:	b1e8      	cbz	r0, 23febfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23febc0:	2700      	movs	r7, #0
 23febc2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febc4:	2018      	movs	r0, #24
 23febc6:	f7ff fadc 	bl	23fe182 <_Znwj>
 23febca:	4604      	mov	r4, r0
 23febcc:	b188      	cbz	r0, 23febf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23febce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23febd0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23febd2:	a802      	add	r0, sp, #8
 23febd4:	f7ff fede 	bl	23fe994 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febd8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23febda:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23febdc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febde:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23febe0:	9204      	str	r2, [sp, #16]
 23febe2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23febe4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23febe6:	60e3      	str	r3, [r4, #12]
 23febe8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23febec:	9205      	str	r2, [sp, #20]
 23febee:	f7ff fef9 	bl	23fe9e4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23febf2:	4b08      	ldr	r3, [pc, #32]	; (23fec14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febf4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23febf6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23febf8:	4b07      	ldr	r3, [pc, #28]	; (23fec18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23febfa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23febfc:	a806      	add	r0, sp, #24
 23febfe:	f7ff fefe 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fec02:	a802      	add	r0, sp, #8
 23fec04:	f7ff febd 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fec08:	2200      	movs	r2, #0
 23fec0a:	4629      	mov	r1, r5
 23fec0c:	4803      	ldr	r0, [pc, #12]	; (23fec1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fec0e:	f7ff fd2d 	bl	23fe66c <application_thread_invoke>
 23fec12:	e7b7      	b.n	23feb84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fec14:	023feab5 	.word	0x023feab5
 23fec18:	023fed31 	.word	0x023fed31
 23fec1c:	023fe95b 	.word	0x023fe95b

023fec20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fec24:	b08b      	sub	sp, #44	; 0x2c
 23fec26:	4605      	mov	r5, r0
 23fec28:	460f      	mov	r7, r1
 23fec2a:	4690      	mov	r8, r2
 23fec2c:	4699      	mov	r9, r3
 23fec2e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fec32:	f7ff fd45 	bl	23fe6c0 <spark_cloud_flag_connected>
 23fec36:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fec38:	4683      	mov	fp, r0
 23fec3a:	bb38      	cbnz	r0, 23fec8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fec3c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fec40:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fec42:	a905      	add	r1, sp, #20
 23fec44:	4630      	mov	r0, r6
 23fec46:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fec4a:	f7ff fecb 	bl	23fe9e4 <_ZN8particle5ErrorC1EOS0_>
 23fec4e:	2014      	movs	r0, #20
 23fec50:	f7ff fa97 	bl	23fe182 <_Znwj>
 23fec54:	4604      	mov	r4, r0
 23fec56:	b148      	cbz	r0, 23fec6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fec58:	2302      	movs	r3, #2
 23fec5a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec5c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fec5e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fec62:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fec64:	4631      	mov	r1, r6
 23fec66:	300c      	adds	r0, #12
 23fec68:	f7ff febc 	bl	23fe9e4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec6c:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fec6e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fec70:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fec74:	f7ff ff36 	bl	23feae4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fec78:	4630      	mov	r0, r6
 23fec7a:	f7ff fec0 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fec7e:	a805      	add	r0, sp, #20
 23fec80:	f7ff febd 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fec84:	4628      	mov	r0, r5
 23fec86:	b00b      	add	sp, #44	; 0x2c
 23fec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fec8c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fec8e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fec90:	2014      	movs	r0, #20
 23fec92:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fec96:	9307      	str	r3, [sp, #28]
 23fec98:	f7ff fa73 	bl	23fe182 <_Znwj>
 23fec9c:	4601      	mov	r1, r0
 23fec9e:	b118      	cbz	r0, 23feca8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23feca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23feca4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23feca6:	7044      	strb	r4, [r0, #1]
 23feca8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fecaa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fecac:	f7ff ff1a 	bl	23feae4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fecb0:	4b1e      	ldr	r3, [pc, #120]	; (23fed2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fecb2:	2008      	movs	r0, #8
 23fecb4:	9308      	str	r3, [sp, #32]
 23fecb6:	f7ff fa64 	bl	23fe182 <_Znwj>
 23fecba:	4604      	mov	r4, r0
 23fecbc:	b110      	cbz	r0, 23fecc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fecbe:	a903      	add	r1, sp, #12
 23fecc0:	f7ff fecb 	bl	23fea5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fecc4:	464a      	mov	r2, r9
 23fecc6:	4641      	mov	r1, r8
 23fecc8:	4638      	mov	r0, r7
 23fecca:	9600      	str	r6, [sp, #0]
 23feccc:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fecd0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fecd2:	f7ff fd03 	bl	23fe6dc <spark_send_event>
 23fecd6:	b9b8      	cbnz	r0, 23fed08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fecd8:	9b03      	ldr	r3, [sp, #12]
 23fecda:	3301      	adds	r3, #1
 23fecdc:	781b      	ldrb	r3, [r3, #0]
 23fecde:	b2db      	uxtb	r3, r3
 23fece0:	b993      	cbnz	r3, 23fed08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fece2:	9305      	str	r3, [sp, #20]
 23fece4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fece8:	a905      	add	r1, sp, #20
 23fecea:	a803      	add	r0, sp, #12
 23fecec:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fecf0:	f7ff ff1c 	bl	23feb2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fecf4:	a805      	add	r0, sp, #20
 23fecf6:	f7ff fe82 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fecfa:	a805      	add	r0, sp, #20
 23fecfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fecfe:	f7ff feb5 	bl	23fea6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fed02:	a806      	add	r0, sp, #24
 23fed04:	f7ff fe13 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed08:	a903      	add	r1, sp, #12
 23fed0a:	a805      	add	r0, sp, #20
 23fed0c:	f7ff fea5 	bl	23fea5a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fed10:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fed12:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fed14:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fed16:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fed18:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fed1a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fed1c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fed1e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fed20:	f7ff fe05 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed24:	a804      	add	r0, sp, #16
 23fed26:	f7ff fe02 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fed2a:	e7ab      	b.n	23fec84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fed2c:	023fedad 	.word	0x023fedad

023fed30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fed30:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fed32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fed34:	4605      	mov	r5, r0
	switch (__op)
 23fed36:	d103      	bne.n	23fed40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fed38:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fed3a:	6003      	str	r3, [r0, #0]
      }
 23fed3c:	2000      	movs	r0, #0
 23fed3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fed40:	2a02      	cmp	r2, #2
 23fed42:	d010      	beq.n	23fed66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fed44:	2a03      	cmp	r2, #3
 23fed46:	d1f9      	bne.n	23fed3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fed48:	6804      	ldr	r4, [r0, #0]
 23fed4a:	2c00      	cmp	r4, #0
 23fed4c:	d0f6      	beq.n	23fed3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fed4e:	f104 0010 	add.w	r0, r4, #16
 23fed52:	f7ff fe54 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fed56:	4620      	mov	r0, r4
 23fed58:	f7ff fe13 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fed5c:	2118      	movs	r1, #24
 23fed5e:	4620      	mov	r0, r4
 23fed60:	f7ff fa13 	bl	23fe18a <_ZdlPvj>
 23fed64:	e7ea      	b.n	23fed3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed66:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fed68:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fed6a:	f7ff fa0a 	bl	23fe182 <_Znwj>
 23fed6e:	4604      	mov	r4, r0
 23fed70:	b150      	cbz	r0, 23fed88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fed72:	4631      	mov	r1, r6
 23fed74:	f7ff feca 	bl	23feb0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fed78:	6930      	ldr	r0, [r6, #16]
 23fed7a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fed7e:	b108      	cbz	r0, 23fed84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fed80:	f000 ff7e 	bl	23ffc80 <strdup>
        type_(type) {
 23fed84:	6120      	str	r0, [r4, #16]
 23fed86:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fed88:	602c      	str	r4, [r5, #0]
	}
 23fed8a:	e7d7      	b.n	23fed3c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fed8c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fed8c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fed8e:	2300      	movs	r3, #0
 23fed90:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fed92:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fed94:	4604      	mov	r4, r0
 23fed96:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fed98:	b12b      	cbz	r3, 23feda6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fed9a:	2202      	movs	r2, #2
 23fed9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fed9e:	68eb      	ldr	r3, [r5, #12]
 23feda0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feda2:	68ab      	ldr	r3, [r5, #8]
 23feda4:	60a3      	str	r3, [r4, #8]
    }
 23feda6:	4620      	mov	r0, r4
 23feda8:	bd38      	pop	{r3, r4, r5, pc}
	...

023fedac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fedac:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fedae:	4604      	mov	r4, r0
 23fedb0:	b089      	sub	sp, #36	; 0x24
 23fedb2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fedb4:	a801      	add	r0, sp, #4
 23fedb6:	4611      	mov	r1, r2
 23fedb8:	f7ff fe58 	bl	23fea6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fedbc:	b1a4      	cbz	r4, 23fede8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fedbe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fedc0:	b11d      	cbz	r5, 23fedca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fedc2:	4628      	mov	r0, r5
 23fedc4:	f000 ff5c 	bl	23ffc80 <strdup>
 23fedc8:	4605      	mov	r5, r0
 23fedca:	a801      	add	r0, sp, #4
 23fedcc:	a903      	add	r1, sp, #12
        type_(type) {
 23fedce:	9503      	str	r5, [sp, #12]
 23fedd0:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fedd4:	f7ff feaa 	bl	23feb2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fedd8:	a803      	add	r0, sp, #12
 23fedda:	f7ff fe10 	bl	23fe9fe <_ZN8particle5ErrorD1Ev>
 23fedde:	a802      	add	r0, sp, #8
 23fede0:	f7ff fda5 	bl	23fe92e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fede4:	b009      	add	sp, #36	; 0x24
 23fede6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fede8:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fedea:	9d01      	ldr	r5, [sp, #4]
 23fedec:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fedf0:	2a00      	cmp	r2, #0
 23fedf2:	d103      	bne.n	23fedfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fedf4:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fedf8:	2900      	cmp	r1, #0
 23fedfa:	d1f7      	bne.n	23fedec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fedfc:	d1ef      	bne.n	23fedde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fedfe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fee00:	2201      	movs	r2, #1
 23fee02:	18eb      	adds	r3, r5, r3
 23fee04:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fee08:	1d2b      	adds	r3, r5, #4
 23fee0a:	e8d3 6fef 	ldaex	r6, [r3]
 23fee0e:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fee12:	2a00      	cmp	r2, #0
 23fee14:	d1f9      	bne.n	23fee0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fee16:	2e00      	cmp	r6, #0
 23fee18:	d0e1      	beq.n	23fedde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fee1a:	4620      	mov	r0, r4
 23fee1c:	f7ff fc18 	bl	23fe650 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fee20:	4607      	mov	r7, r0
 23fee22:	b160      	cbz	r0, 23fee3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fee24:	4630      	mov	r0, r6
 23fee26:	f105 010c 	add.w	r1, r5, #12
 23fee2a:	f7ff fe4a 	bl	23feac2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fee2e:	4630      	mov	r0, r6
 23fee30:	f7ff fda7 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fee34:	2110      	movs	r1, #16
 23fee36:	4630      	mov	r0, r6
 23fee38:	f7ff f9a7 	bl	23fe18a <_ZdlPvj>
 23fee3c:	e7cf      	b.n	23fedde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fee3e:	4631      	mov	r1, r6
 23fee40:	a803      	add	r0, sp, #12
 23fee42:	f7ff ffa3 	bl	23fed8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fee46:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fee48:	2010      	movs	r0, #16
 23fee4a:	f88d 301c 	strb.w	r3, [sp, #28]
 23fee4e:	f7ff f998 	bl	23fe182 <_Znwj>
 23fee52:	4605      	mov	r5, r0
 23fee54:	b1d0      	cbz	r0, 23fee8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fee56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee58:	2014      	movs	r0, #20
 23fee5a:	f7ff f992 	bl	23fe182 <_Znwj>
 23fee5e:	4604      	mov	r4, r0
 23fee60:	b178      	cbz	r0, 23fee82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fee62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fee64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fee66:	a803      	add	r0, sp, #12
 23fee68:	f7ff fd94 	bl	23fe994 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee6c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fee6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fee72:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fee74:	9205      	str	r2, [sp, #20]
 23fee76:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fee78:	60e3      	str	r3, [r4, #12]
 23fee7a:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fee7e:	9206      	str	r2, [sp, #24]
 23fee80:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee82:	4b07      	ldr	r3, [pc, #28]	; (23feea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fee84:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fee86:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fee88:	4b06      	ldr	r3, [pc, #24]	; (23feea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fee8a:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fee8c:	a803      	add	r0, sp, #12
 23fee8e:	f7ff fd78 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fee92:	2200      	movs	r2, #0
 23fee94:	4629      	mov	r1, r5
 23fee96:	4804      	ldr	r0, [pc, #16]	; (23feea8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fee98:	f7ff fbe8 	bl	23fe66c <application_thread_invoke>
 23fee9c:	e7c7      	b.n	23fee2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fee9e:	bf00      	nop
 23feea0:	023fead5 	.word	0x023fead5
 23feea4:	023feead 	.word	0x023feead
 23feea8:	023fe95b 	.word	0x023fe95b

023feeac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23feeac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23feeae:	b570      	push	{r4, r5, r6, lr}
 23feeb0:	4604      	mov	r4, r0
	switch (__op)
 23feeb2:	d103      	bne.n	23feebc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23feeb4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23feeb6:	6003      	str	r3, [r0, #0]
      }
 23feeb8:	2000      	movs	r0, #0
 23feeba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23feebc:	2a02      	cmp	r2, #2
 23feebe:	d00c      	beq.n	23feeda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23feec0:	2a03      	cmp	r2, #3
 23feec2:	d1f9      	bne.n	23feeb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23feec4:	6804      	ldr	r4, [r0, #0]
 23feec6:	2c00      	cmp	r4, #0
 23feec8:	d0f6      	beq.n	23feeb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23feeca:	4620      	mov	r0, r4
 23feecc:	f7ff fd59 	bl	23fe982 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23feed0:	2114      	movs	r1, #20
 23feed2:	4620      	mov	r0, r4
 23feed4:	f7ff f959 	bl	23fe18a <_ZdlPvj>
 23feed8:	e7ee      	b.n	23feeb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23feeda:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23feedc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23feede:	f7ff f950 	bl	23fe182 <_Znwj>
 23feee2:	4605      	mov	r5, r0
 23feee4:	b120      	cbz	r0, 23feef0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23feee6:	4631      	mov	r1, r6
 23feee8:	f7ff ff50 	bl	23fed8c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23feeec:	7c33      	ldrb	r3, [r6, #16]
 23feeee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23feef0:	6025      	str	r5, [r4, #0]
	}
 23feef2:	e7e1      	b.n	23feeb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023feef4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23feef4:	2200      	movs	r2, #0
 23feef6:	6840      	ldr	r0, [r0, #4]
 23feef8:	4611      	mov	r1, r2
 23feefa:	f7ff bc6d 	b.w	23fe7d8 <network_listening>

023feefe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feefe:	2200      	movs	r2, #0
 23fef00:	6840      	ldr	r0, [r0, #4]
 23fef02:	4611      	mov	r1, r2
 23fef04:	f7ff bc84 	b.w	23fe810 <network_get_listen_timeout>

023fef08 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fef08:	2200      	movs	r2, #0
 23fef0a:	6840      	ldr	r0, [r0, #4]
 23fef0c:	f7ff bc72 	b.w	23fe7f4 <network_set_listen_timeout>

023fef10 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fef10:	2200      	movs	r2, #0
 23fef12:	6840      	ldr	r0, [r0, #4]
 23fef14:	f081 0101 	eor.w	r1, r1, #1
 23fef18:	f7ff bc50 	b.w	23fe7bc <network_listen>

023fef1c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef1c:	2300      	movs	r3, #0
 23fef1e:	6840      	ldr	r0, [r0, #4]
 23fef20:	461a      	mov	r2, r3
 23fef22:	4619      	mov	r1, r3
 23fef24:	f7ff bc3c 	b.w	23fe7a0 <network_off>

023fef28 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef28:	2300      	movs	r3, #0
 23fef2a:	6840      	ldr	r0, [r0, #4]
 23fef2c:	461a      	mov	r2, r3
 23fef2e:	4619      	mov	r1, r3
 23fef30:	f7ff bc28 	b.w	23fe784 <network_on>

023fef34 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fef34:	2200      	movs	r2, #0
 23fef36:	6840      	ldr	r0, [r0, #4]
 23fef38:	4611      	mov	r1, r2
 23fef3a:	f7ff bc15 	b.w	23fe768 <network_ready>

023fef3e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fef3e:	2200      	movs	r2, #0
 23fef40:	6840      	ldr	r0, [r0, #4]
 23fef42:	4611      	mov	r1, r2
 23fef44:	f7ff bbf4 	b.w	23fe730 <network_connecting>

023fef48 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fef48:	2200      	movs	r2, #0
 23fef4a:	2102      	movs	r1, #2
 23fef4c:	6840      	ldr	r0, [r0, #4]
 23fef4e:	f7ff bbfd 	b.w	23fe74c <network_disconnect>

023fef52 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fef52:	2300      	movs	r3, #0
 23fef54:	6840      	ldr	r0, [r0, #4]
 23fef56:	461a      	mov	r2, r3
 23fef58:	f7ff bbdc 	b.w	23fe714 <network_connect>

023fef5c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fef5c:	2203      	movs	r2, #3
 23fef5e:	4b02      	ldr	r3, [pc, #8]	; (23fef68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fef60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fef62:	4a02      	ldr	r2, [pc, #8]	; (23fef6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fef64:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fef66:	4770      	bx	lr
 23fef68:	1007ae84 	.word	0x1007ae84
 23fef6c:	023ffdf0 	.word	0x023ffdf0

023fef70 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fef70:	4770      	bx	lr

023fef72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fef72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef74:	4606      	mov	r6, r0
 23fef76:	4615      	mov	r5, r2
 23fef78:	460c      	mov	r4, r1
 23fef7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fef7c:	42bc      	cmp	r4, r7
 23fef7e:	d006      	beq.n	23fef8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fef80:	6833      	ldr	r3, [r6, #0]
 23fef82:	4630      	mov	r0, r6
 23fef84:	689b      	ldr	r3, [r3, #8]
 23fef86:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fef8a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fef8c:	e7f6      	b.n	23fef7c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fef8e:	4628      	mov	r0, r5
 23fef90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef92 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fef92:	2200      	movs	r2, #0
 23fef94:	7c00      	ldrb	r0, [r0, #16]
 23fef96:	f7ff b9c5 	b.w	23fe324 <hal_i2c_write>

023fef9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fef9a:	2100      	movs	r1, #0
 23fef9c:	7c00      	ldrb	r0, [r0, #16]
 23fef9e:	f7ff b9cf 	b.w	23fe340 <hal_i2c_available>

023fefa2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fefa2:	2100      	movs	r1, #0
 23fefa4:	7c00      	ldrb	r0, [r0, #16]
 23fefa6:	f7ff b9d9 	b.w	23fe35c <hal_i2c_read>

023fefaa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fefaa:	2100      	movs	r1, #0
 23fefac:	7c00      	ldrb	r0, [r0, #16]
 23fefae:	f7ff b9e3 	b.w	23fe378 <hal_i2c_peek>

023fefb2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fefb2:	2100      	movs	r1, #0
 23fefb4:	7c00      	ldrb	r0, [r0, #16]
 23fefb6:	f7ff b9ed 	b.w	23fe394 <hal_i2c_flush>

023fefba <_ZN7TwoWireD0Ev>:
 23fefba:	b510      	push	{r4, lr}
 23fefbc:	4604      	mov	r4, r0
 23fefbe:	2114      	movs	r1, #20
 23fefc0:	f7ff f8e3 	bl	23fe18a <_ZdlPvj>
 23fefc4:	4620      	mov	r0, r4
 23fefc6:	bd10      	pop	{r4, pc}

023fefc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fefc8:	b538      	push	{r3, r4, r5, lr}
 23fefca:	4604      	mov	r4, r0
 23fefcc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fefce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fefd2:	2200      	movs	r2, #0
 23fefd4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fefd8:	4b09      	ldr	r3, [pc, #36]	; (23ff000 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fefda:	4608      	mov	r0, r1
  _i2c = i2c;
 23fefdc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fefde:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fefe0:	4629      	mov	r1, r5
 23fefe2:	f7ff f9f3 	bl	23fe3cc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fefe6:	30bf      	adds	r0, #191	; 0xbf
 23fefe8:	d108      	bne.n	23feffc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fefea:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fefec:	07db      	lsls	r3, r3, #31
 23fefee:	d505      	bpl.n	23feffc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23feff0:	6868      	ldr	r0, [r5, #4]
 23feff2:	f7ff fc45 	bl	23fe880 <free>
    free(conf.tx_buffer);
 23feff6:	68e8      	ldr	r0, [r5, #12]
 23feff8:	f7ff fc42 	bl	23fe880 <free>
}
 23feffc:	4620      	mov	r0, r4
 23feffe:	bd38      	pop	{r3, r4, r5, pc}
 23ff000:	023ffe2c 	.word	0x023ffe2c

023ff004 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff004:	4770      	bx	lr

023ff006 <_ZN9IPAddressD0Ev>:
 23ff006:	b510      	push	{r4, lr}
 23ff008:	4604      	mov	r4, r0
 23ff00a:	2118      	movs	r1, #24
 23ff00c:	f7ff f8bd 	bl	23fe18a <_ZdlPvj>
 23ff010:	4620      	mov	r0, r4
 23ff012:	bd10      	pop	{r4, pc}

023ff014 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff014:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff016:	7d03      	ldrb	r3, [r0, #20]
{
 23ff018:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff01a:	2b06      	cmp	r3, #6
 23ff01c:	f04f 0400 	mov.w	r4, #0
{
 23ff020:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff022:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff026:	d012      	beq.n	23ff04e <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff028:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff02c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff030:	220a      	movs	r2, #10
 23ff032:	4630      	mov	r0, r6
 23ff034:	f000 f953 	bl	23ff2de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff038:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff03a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff03c:	d019      	beq.n	23ff072 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff03e:	2c00      	cmp	r4, #0
 23ff040:	d0f4      	beq.n	23ff02c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff042:	212e      	movs	r1, #46	; 0x2e
 23ff044:	4630      	mov	r0, r6
 23ff046:	f000 f93b 	bl	23ff2c0 <_ZN5Print5printEc>
 23ff04a:	4404      	add	r4, r0
 23ff04c:	e7ee      	b.n	23ff02c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff04e:	232f      	movs	r3, #47	; 0x2f
 23ff050:	466a      	mov	r2, sp
 23ff052:	4639      	mov	r1, r7
 23ff054:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff056:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff05a:	f7ff f9c5 	bl	23fe3e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff05e:	4668      	mov	r0, sp
 23ff060:	f7ff f86a 	bl	23fe138 <strlen>
 23ff064:	6833      	ldr	r3, [r6, #0]
 23ff066:	4602      	mov	r2, r0
 23ff068:	4669      	mov	r1, sp
 23ff06a:	4630      	mov	r0, r6
 23ff06c:	68db      	ldr	r3, [r3, #12]
 23ff06e:	4798      	blx	r3
 23ff070:	4604      	mov	r4, r0
    }
    return n;
}
 23ff072:	4620      	mov	r0, r4
 23ff074:	b00d      	add	sp, #52	; 0x34
 23ff076:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff078 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff078:	b510      	push	{r4, lr}
 23ff07a:	4604      	mov	r4, r0
 23ff07c:	4b04      	ldr	r3, [pc, #16]	; (23ff090 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff07e:	2211      	movs	r2, #17
 23ff080:	2100      	movs	r1, #0
 23ff082:	f840 3b04 	str.w	r3, [r0], #4
 23ff086:	f000 fdbd 	bl	23ffc04 <memset>
}
 23ff08a:	4620      	mov	r0, r4
 23ff08c:	bd10      	pop	{r4, pc}
 23ff08e:	bf00      	nop
 23ff090:	023ffe54 	.word	0x023ffe54

023ff094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff094:	4603      	mov	r3, r0
 23ff096:	4a07      	ldr	r2, [pc, #28]	; (23ff0b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff098:	b510      	push	{r4, lr}
 23ff09a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff09e:	f101 0210 	add.w	r2, r1, #16
 23ff0a2:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff0a6:	4291      	cmp	r1, r2
 23ff0a8:	f843 4b04 	str.w	r4, [r3], #4
 23ff0ac:	d1f9      	bne.n	23ff0a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff0ae:	780a      	ldrb	r2, [r1, #0]
 23ff0b0:	701a      	strb	r2, [r3, #0]
}
 23ff0b2:	bd10      	pop	{r4, pc}
 23ff0b4:	023ffe54 	.word	0x023ffe54

023ff0b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff0b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff0ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff0be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff0c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff0c6:	2304      	movs	r3, #4
 23ff0c8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff0cc:	6041      	str	r1, [r0, #4]
 23ff0ce:	7503      	strb	r3, [r0, #20]
}
 23ff0d0:	bd10      	pop	{r4, pc}
	...

023ff0d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff0d4:	b507      	push	{r0, r1, r2, lr}
 23ff0d6:	4b06      	ldr	r3, [pc, #24]	; (23ff0f0 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff0d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff0da:	78cb      	ldrb	r3, [r1, #3]
 23ff0dc:	9300      	str	r3, [sp, #0]
 23ff0de:	788b      	ldrb	r3, [r1, #2]
 23ff0e0:	784a      	ldrb	r2, [r1, #1]
 23ff0e2:	7809      	ldrb	r1, [r1, #0]
 23ff0e4:	f7ff ffe8 	bl	23ff0b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff0e8:	b003      	add	sp, #12
 23ff0ea:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff0ee:	bf00      	nop
 23ff0f0:	023ffe54 	.word	0x023ffe54

023ff0f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff0f4:	4b01      	ldr	r3, [pc, #4]	; (23ff0fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff0f6:	4a02      	ldr	r2, [pc, #8]	; (23ff100 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff0f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff0fa:	4770      	bx	lr
 23ff0fc:	1007ae8c 	.word	0x1007ae8c
 23ff100:	023ffe60 	.word	0x023ffe60

023ff104 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff104:	2300      	movs	r3, #0
 23ff106:	6840      	ldr	r0, [r0, #4]
 23ff108:	461a      	mov	r2, r3
 23ff10a:	f7ff bb03 	b.w	23fe714 <network_connect>

023ff10e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff10e:	2200      	movs	r2, #0
 23ff110:	2102      	movs	r1, #2
 23ff112:	6840      	ldr	r0, [r0, #4]
 23ff114:	f7ff bb1a 	b.w	23fe74c <network_disconnect>

023ff118 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff118:	2200      	movs	r2, #0
 23ff11a:	6840      	ldr	r0, [r0, #4]
 23ff11c:	4611      	mov	r1, r2
 23ff11e:	f7ff bb07 	b.w	23fe730 <network_connecting>

023ff122 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff122:	2200      	movs	r2, #0
 23ff124:	6840      	ldr	r0, [r0, #4]
 23ff126:	4611      	mov	r1, r2
 23ff128:	f7ff bb1e 	b.w	23fe768 <network_ready>

023ff12c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff12c:	2300      	movs	r3, #0
 23ff12e:	6840      	ldr	r0, [r0, #4]
 23ff130:	461a      	mov	r2, r3
 23ff132:	4619      	mov	r1, r3
 23ff134:	f7ff bb26 	b.w	23fe784 <network_on>

023ff138 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff138:	2300      	movs	r3, #0
 23ff13a:	6840      	ldr	r0, [r0, #4]
 23ff13c:	461a      	mov	r2, r3
 23ff13e:	4619      	mov	r1, r3
 23ff140:	f7ff bb2e 	b.w	23fe7a0 <network_off>

023ff144 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff144:	2100      	movs	r1, #0
 23ff146:	6840      	ldr	r0, [r0, #4]
 23ff148:	f7ff bb70 	b.w	23fe82c <network_is_on>

023ff14c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff14c:	2100      	movs	r1, #0
 23ff14e:	6840      	ldr	r0, [r0, #4]
 23ff150:	f7ff bb7a 	b.w	23fe848 <network_is_off>

023ff154 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff154:	2200      	movs	r2, #0
 23ff156:	6840      	ldr	r0, [r0, #4]
 23ff158:	f081 0101 	eor.w	r1, r1, #1
 23ff15c:	f7ff bb2e 	b.w	23fe7bc <network_listen>

023ff160 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff160:	2200      	movs	r2, #0
 23ff162:	6840      	ldr	r0, [r0, #4]
 23ff164:	f7ff bb46 	b.w	23fe7f4 <network_set_listen_timeout>

023ff168 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff168:	2200      	movs	r2, #0
 23ff16a:	6840      	ldr	r0, [r0, #4]
 23ff16c:	4611      	mov	r1, r2
 23ff16e:	f7ff bb4f 	b.w	23fe810 <network_get_listen_timeout>

023ff172 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff172:	2200      	movs	r2, #0
 23ff174:	6840      	ldr	r0, [r0, #4]
 23ff176:	4611      	mov	r1, r2
 23ff178:	f7ff bb2e 	b.w	23fe7d8 <network_listening>

023ff17c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff180:	b095      	sub	sp, #84	; 0x54
 23ff182:	4614      	mov	r4, r2
 23ff184:	460d      	mov	r5, r1
 23ff186:	4607      	mov	r7, r0
    IPAddress addr;
 23ff188:	f7ff ff76 	bl	23ff078 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff18c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff18e:	221c      	movs	r2, #28
 23ff190:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff192:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff194:	f000 fd36 	bl	23ffc04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff198:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff19a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff19c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff19e:	2100      	movs	r1, #0
 23ff1a0:	466b      	mov	r3, sp
 23ff1a2:	aa0c      	add	r2, sp, #48	; 0x30
 23ff1a4:	f7ff f93c 	bl	23fe420 <netdb_getaddrinfo>
    if (!r) {
 23ff1a8:	4604      	mov	r4, r0
 23ff1aa:	2800      	cmp	r0, #0
 23ff1ac:	d14b      	bne.n	23ff246 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff1ae:	4602      	mov	r2, r0
 23ff1b0:	2101      	movs	r1, #1
 23ff1b2:	6868      	ldr	r0, [r5, #4]
 23ff1b4:	f7ff fad8 	bl	23fe768 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff1ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1bc:	4622      	mov	r2, r4
 23ff1be:	6868      	ldr	r0, [r5, #4]
 23ff1c0:	f7ff fad2 	bl	23fe768 <network_ready>
        bool ok = false;
 23ff1c4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff1c6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff1c8:	9e00      	ldr	r6, [sp, #0]
 23ff1ca:	2e00      	cmp	r6, #0
 23ff1cc:	d03b      	beq.n	23ff246 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff1ce:	2900      	cmp	r1, #0
 23ff1d0:	d139      	bne.n	23ff246 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff1d2:	6873      	ldr	r3, [r6, #4]
 23ff1d4:	2b02      	cmp	r3, #2
 23ff1d6:	d003      	beq.n	23ff1e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff1d8:	2b0a      	cmp	r3, #10
 23ff1da:	d011      	beq.n	23ff200 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff1dc:	69f6      	ldr	r6, [r6, #28]
 23ff1de:	e7f4      	b.n	23ff1ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff1e0:	f1b8 0f00 	cmp.w	r8, #0
 23ff1e4:	d0fa      	beq.n	23ff1dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff1e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff1e8:	a806      	add	r0, sp, #24
 23ff1ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff1ec:	1d3c      	adds	r4, r7, #4
 23ff1ee:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff1f0:	f7ff ff70 	bl	23ff0d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff1f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff1f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff1f8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff1fa:	4641      	mov	r1, r8
 23ff1fc:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff1fe:	e7ed      	b.n	23ff1dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff200:	f1b9 0f00 	cmp.w	r9, #0
 23ff204:	d0ea      	beq.n	23ff1dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff206:	2210      	movs	r2, #16
 23ff208:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff20a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff20c:	f000 fcfa 	bl	23ffc04 <memset>
                    a.v = 6;
 23ff210:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff212:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff214:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff218:	f104 0308 	add.w	r3, r4, #8
 23ff21c:	3418      	adds	r4, #24
 23ff21e:	462a      	mov	r2, r5
 23ff220:	6818      	ldr	r0, [r3, #0]
 23ff222:	6859      	ldr	r1, [r3, #4]
 23ff224:	3308      	adds	r3, #8
 23ff226:	c203      	stmia	r2!, {r0, r1}
 23ff228:	42a3      	cmp	r3, r4
 23ff22a:	4615      	mov	r5, r2
 23ff22c:	d1f7      	bne.n	23ff21e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff22e:	a901      	add	r1, sp, #4
 23ff230:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff232:	1d3c      	adds	r4, r7, #4
 23ff234:	ad07      	add	r5, sp, #28
 23ff236:	f7ff ff2d 	bl	23ff094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff23a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff23c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff23e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff240:	4649      	mov	r1, r9
 23ff242:	7023      	strb	r3, [r4, #0]
                    break;
 23ff244:	e7ca      	b.n	23ff1dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff246:	9800      	ldr	r0, [sp, #0]
 23ff248:	f7ff f8dc 	bl	23fe404 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff24c:	4638      	mov	r0, r7
 23ff24e:	b015      	add	sp, #84	; 0x54
 23ff250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff254 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff254:	4b02      	ldr	r3, [pc, #8]	; (23ff260 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff256:	4a03      	ldr	r2, [pc, #12]	; (23ff264 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff258:	601a      	str	r2, [r3, #0]
 23ff25a:	2200      	movs	r2, #0
 23ff25c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff25e:	4770      	bx	lr
 23ff260:	1007ae90 	.word	0x1007ae90
 23ff264:	023ffe6c 	.word	0x023ffe6c

023ff268 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff26a:	4606      	mov	r6, r0
 23ff26c:	460d      	mov	r5, r1
  size_t n = 0;
 23ff26e:	2400      	movs	r4, #0
 23ff270:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff272:	42bd      	cmp	r5, r7
 23ff274:	d00c      	beq.n	23ff290 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff276:	6833      	ldr	r3, [r6, #0]
 23ff278:	4630      	mov	r0, r6
 23ff27a:	689b      	ldr	r3, [r3, #8]
 23ff27c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff280:	4798      	blx	r3
     if (chunk>=0)
 23ff282:	1e03      	subs	r3, r0, #0
 23ff284:	db01      	blt.n	23ff28a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff286:	441c      	add	r4, r3
  while (size--) {
 23ff288:	e7f3      	b.n	23ff272 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff28a:	2c00      	cmp	r4, #0
 23ff28c:	bf08      	it	eq
 23ff28e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff290:	4620      	mov	r0, r4
 23ff292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff294 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff294:	b513      	push	{r0, r1, r4, lr}
 23ff296:	4604      	mov	r4, r0
    }
 23ff298:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff29a:	b159      	cbz	r1, 23ff2b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff29c:	9101      	str	r1, [sp, #4]
 23ff29e:	f7fe ff4b 	bl	23fe138 <strlen>
 23ff2a2:	4602      	mov	r2, r0
 23ff2a4:	4620      	mov	r0, r4
 23ff2a6:	6823      	ldr	r3, [r4, #0]
 23ff2a8:	9901      	ldr	r1, [sp, #4]
 23ff2aa:	68db      	ldr	r3, [r3, #12]
    }
 23ff2ac:	b002      	add	sp, #8
 23ff2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff2b2:	4718      	bx	r3
    }
 23ff2b4:	b002      	add	sp, #8
 23ff2b6:	bd10      	pop	{r4, pc}

023ff2b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff2b8:	b508      	push	{r3, lr}
  return write(str);
 23ff2ba:	f7ff ffeb 	bl	23ff294 <_ZN5Print5writeEPKc>
}
 23ff2be:	bd08      	pop	{r3, pc}

023ff2c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff2c0:	6803      	ldr	r3, [r0, #0]
 23ff2c2:	689b      	ldr	r3, [r3, #8]
 23ff2c4:	4718      	bx	r3

023ff2c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff2c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff2c8:	210d      	movs	r1, #13
{
 23ff2ca:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff2cc:	f7ff fff8 	bl	23ff2c0 <_ZN5Print5printEc>
  n += print('\n');
 23ff2d0:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff2d2:	4604      	mov	r4, r0
  n += print('\n');
 23ff2d4:	4628      	mov	r0, r5
 23ff2d6:	f7ff fff3 	bl	23ff2c0 <_ZN5Print5printEc>
  return n;
}
 23ff2da:	4420      	add	r0, r4
 23ff2dc:	bd38      	pop	{r3, r4, r5, pc}

023ff2de <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff2de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff2e0:	2a01      	cmp	r2, #1
 23ff2e2:	bf98      	it	ls
 23ff2e4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff2e6:	b530      	push	{r4, r5, lr}
 23ff2e8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff2ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff2ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff2f0:	460d      	mov	r5, r1
 23ff2f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff2f6:	fb01 5312 	mls	r3, r1, r2, r5
 23ff2fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff2fe:	2b09      	cmp	r3, #9
 23ff300:	bf94      	ite	ls
 23ff302:	3330      	addls	r3, #48	; 0x30
 23ff304:	3337      	addhi	r3, #55	; 0x37
 23ff306:	b2db      	uxtb	r3, r3
  } while(n);
 23ff308:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff30a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff30e:	d9ef      	bls.n	23ff2f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff310:	4621      	mov	r1, r4
 23ff312:	f7ff ffbf 	bl	23ff294 <_ZN5Print5writeEPKc>
}
 23ff316:	b00b      	add	sp, #44	; 0x2c
 23ff318:	bd30      	pop	{r4, r5, pc}
	...

023ff31c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23ff31c:	2200      	movs	r2, #0
 23ff31e:	4b01      	ldr	r3, [pc, #4]	; (23ff324 <_GLOBAL__sub_I_RGB+0x8>)
 23ff320:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff322:	4770      	bx	lr
 23ff324:	1007ae98 	.word	0x1007ae98

023ff328 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff328:	b510      	push	{r4, lr}
 23ff32a:	4604      	mov	r4, r0
 23ff32c:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff32e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff330:	f7ff f884 	bl	23fe43c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff334:	2300      	movs	r3, #0
}
 23ff336:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff338:	6063      	str	r3, [r4, #4]
}
 23ff33a:	bd10      	pop	{r4, pc}

023ff33c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff33c:	b510      	push	{r4, lr}
 23ff33e:	4604      	mov	r4, r0
{
	free(buffer);
 23ff340:	6800      	ldr	r0, [r0, #0]
 23ff342:	f7ff fa9d 	bl	23fe880 <free>
}
 23ff346:	4620      	mov	r0, r4
 23ff348:	bd10      	pop	{r4, pc}

023ff34a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff34a:	b510      	push	{r4, lr}
 23ff34c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff34e:	6800      	ldr	r0, [r0, #0]
 23ff350:	b108      	cbz	r0, 23ff356 <_ZN6String10invalidateEv+0xc>
 23ff352:	f7ff fa95 	bl	23fe880 <free>
	buffer = NULL;
 23ff356:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff358:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff35c:	6023      	str	r3, [r4, #0]
}
 23ff35e:	bd10      	pop	{r4, pc}

023ff360 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff360:	b538      	push	{r3, r4, r5, lr}
 23ff362:	4604      	mov	r4, r0
 23ff364:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff366:	6800      	ldr	r0, [r0, #0]
 23ff368:	3101      	adds	r1, #1
 23ff36a:	f7ff fa97 	bl	23fe89c <realloc>
	if (newbuffer) {
 23ff36e:	b110      	cbz	r0, 23ff376 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff370:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff374:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff376:	bd38      	pop	{r3, r4, r5, pc}

023ff378 <_ZN6String7reserveEj>:
{
 23ff378:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff37a:	6803      	ldr	r3, [r0, #0]
{
 23ff37c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff37e:	b123      	cbz	r3, 23ff38a <_ZN6String7reserveEj+0x12>
 23ff380:	6843      	ldr	r3, [r0, #4]
 23ff382:	428b      	cmp	r3, r1
 23ff384:	d301      	bcc.n	23ff38a <_ZN6String7reserveEj+0x12>
 23ff386:	2001      	movs	r0, #1
}
 23ff388:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff38a:	4620      	mov	r0, r4
 23ff38c:	f7ff ffe8 	bl	23ff360 <_ZN6String12changeBufferEj>
 23ff390:	2800      	cmp	r0, #0
 23ff392:	d0f9      	beq.n	23ff388 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff394:	68a3      	ldr	r3, [r4, #8]
 23ff396:	2b00      	cmp	r3, #0
 23ff398:	d1f5      	bne.n	23ff386 <_ZN6String7reserveEj+0xe>
 23ff39a:	6822      	ldr	r2, [r4, #0]
 23ff39c:	7013      	strb	r3, [r2, #0]
 23ff39e:	e7f2      	b.n	23ff386 <_ZN6String7reserveEj+0xe>

023ff3a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff3a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff3a4:	4611      	mov	r1, r2
 23ff3a6:	9201      	str	r2, [sp, #4]
{
 23ff3a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff3aa:	f7ff ffe5 	bl	23ff378 <_ZN6String7reserveEj>
 23ff3ae:	9a01      	ldr	r2, [sp, #4]
 23ff3b0:	b928      	cbnz	r0, 23ff3be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff3b2:	4620      	mov	r0, r4
 23ff3b4:	f7ff ffc9 	bl	23ff34a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff3b8:	4620      	mov	r0, r4
 23ff3ba:	b003      	add	sp, #12
 23ff3bc:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff3be:	4629      	mov	r1, r5
	len = length;
 23ff3c0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff3c2:	6820      	ldr	r0, [r4, #0]
 23ff3c4:	f000 fc11 	bl	23ffbea <memcpy>
	buffer[len] = 0;
 23ff3c8:	2100      	movs	r1, #0
 23ff3ca:	6822      	ldr	r2, [r4, #0]
 23ff3cc:	68a3      	ldr	r3, [r4, #8]
 23ff3ce:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff3d0:	e7f2      	b.n	23ff3b8 <_ZN6String4copyEPKcj+0x18>

023ff3d2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff3d2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff3d4:	b513      	push	{r0, r1, r4, lr}
 23ff3d6:	4604      	mov	r4, r0
	capacity = 0;
 23ff3d8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff3dc:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff3de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff3e0:	b141      	cbz	r1, 23ff3f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff3e2:	4608      	mov	r0, r1
 23ff3e4:	9101      	str	r1, [sp, #4]
 23ff3e6:	f7fe fea7 	bl	23fe138 <strlen>
 23ff3ea:	9901      	ldr	r1, [sp, #4]
 23ff3ec:	4602      	mov	r2, r0
 23ff3ee:	4620      	mov	r0, r4
 23ff3f0:	f7ff ffd6 	bl	23ff3a0 <_ZN6String4copyEPKcj>
}
 23ff3f4:	4620      	mov	r0, r4
 23ff3f6:	b002      	add	sp, #8
 23ff3f8:	bd10      	pop	{r4, pc}

023ff3fa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff3fa:	4288      	cmp	r0, r1
{
 23ff3fc:	b510      	push	{r4, lr}
 23ff3fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff400:	d005      	beq.n	23ff40e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff402:	680b      	ldr	r3, [r1, #0]
 23ff404:	b12b      	cbz	r3, 23ff412 <_ZN6StringaSERKS_+0x18>
 23ff406:	688a      	ldr	r2, [r1, #8]
 23ff408:	4619      	mov	r1, r3
 23ff40a:	f7ff ffc9 	bl	23ff3a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff40e:	4620      	mov	r0, r4
 23ff410:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff412:	f7ff ff9a 	bl	23ff34a <_ZN6String10invalidateEv>
 23ff416:	e7fa      	b.n	23ff40e <_ZN6StringaSERKS_+0x14>

023ff418 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff418:	2300      	movs	r3, #0
String::String(const String &value)
 23ff41a:	b510      	push	{r4, lr}
 23ff41c:	4604      	mov	r4, r0
	capacity = 0;
 23ff41e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff422:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff424:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff426:	f7ff ffe8 	bl	23ff3fa <_ZN6StringaSERKS_>
}
 23ff42a:	4620      	mov	r0, r4
 23ff42c:	bd10      	pop	{r4, pc}

023ff42e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23ff42e:	b513      	push	{r0, r1, r4, lr}
 23ff430:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23ff432:	b159      	cbz	r1, 23ff44c <_ZN6StringaSEPKc+0x1e>
 23ff434:	4608      	mov	r0, r1
 23ff436:	9101      	str	r1, [sp, #4]
 23ff438:	f7fe fe7e 	bl	23fe138 <strlen>
 23ff43c:	9901      	ldr	r1, [sp, #4]
 23ff43e:	4602      	mov	r2, r0
 23ff440:	4620      	mov	r0, r4
 23ff442:	f7ff ffad 	bl	23ff3a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff446:	4620      	mov	r0, r4
 23ff448:	b002      	add	sp, #8
 23ff44a:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff44c:	f7ff ff7d 	bl	23ff34a <_ZN6String10invalidateEv>
 23ff450:	e7f9      	b.n	23ff446 <_ZN6StringaSEPKc+0x18>

023ff452 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23ff452:	b510      	push	{r4, lr}
	buffer = NULL;
 23ff454:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 23ff456:	4604      	mov	r4, r0
 23ff458:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 23ff45a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23ff45e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23ff460:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 23ff462:	4608      	mov	r0, r1
	itoa(value, buf, base);
 23ff464:	a901      	add	r1, sp, #4
 23ff466:	f000 f9a7 	bl	23ff7b8 <itoa>
	*this = buf;
 23ff46a:	4620      	mov	r0, r4
 23ff46c:	a901      	add	r1, sp, #4
 23ff46e:	f7ff ffde 	bl	23ff42e <_ZN6StringaSEPKc>
}
 23ff472:	4620      	mov	r0, r4
 23ff474:	b00a      	add	sp, #40	; 0x28
 23ff476:	bd10      	pop	{r4, pc}

023ff478 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff478:	b570      	push	{r4, r5, r6, lr}
 23ff47a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff47c:	460e      	mov	r6, r1
 23ff47e:	b909      	cbnz	r1, 23ff484 <_ZN6String6concatEPKcj+0xc>
 23ff480:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff482:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff484:	b16a      	cbz	r2, 23ff4a2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff486:	6884      	ldr	r4, [r0, #8]
 23ff488:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff48a:	4621      	mov	r1, r4
 23ff48c:	f7ff ff74 	bl	23ff378 <_ZN6String7reserveEj>
 23ff490:	2800      	cmp	r0, #0
 23ff492:	d0f5      	beq.n	23ff480 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff494:	6828      	ldr	r0, [r5, #0]
 23ff496:	68ab      	ldr	r3, [r5, #8]
 23ff498:	4631      	mov	r1, r6
 23ff49a:	4418      	add	r0, r3
 23ff49c:	f000 fbe8 	bl	23ffc70 <strcpy>
	len = newlen;
 23ff4a0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff4a2:	2001      	movs	r0, #1
 23ff4a4:	e7ed      	b.n	23ff482 <_ZN6String6concatEPKcj+0xa>

023ff4a6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23ff4a6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff4a8:	688a      	ldr	r2, [r1, #8]
 23ff4aa:	6809      	ldr	r1, [r1, #0]
{
 23ff4ac:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff4ae:	f7ff ffe3 	bl	23ff478 <_ZN6String6concatEPKcj>
 23ff4b2:	b910      	cbnz	r0, 23ff4ba <_ZplRK15StringSumHelperRK6String+0x14>
 23ff4b4:	4620      	mov	r0, r4
 23ff4b6:	f7ff ff48 	bl	23ff34a <_ZN6String10invalidateEv>
	return a;
}
 23ff4ba:	4620      	mov	r0, r4
 23ff4bc:	bd10      	pop	{r4, pc}

023ff4be <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23ff4be:	b513      	push	{r0, r1, r4, lr}
 23ff4c0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23ff4c2:	b929      	cbnz	r1, 23ff4d0 <_ZplRK15StringSumHelperPKc+0x12>
 23ff4c4:	4620      	mov	r0, r4
 23ff4c6:	f7ff ff40 	bl	23ff34a <_ZN6String10invalidateEv>
	return a;
}
 23ff4ca:	4620      	mov	r0, r4
 23ff4cc:	b002      	add	sp, #8
 23ff4ce:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23ff4d0:	4608      	mov	r0, r1
 23ff4d2:	9101      	str	r1, [sp, #4]
 23ff4d4:	f7fe fe30 	bl	23fe138 <strlen>
 23ff4d8:	9901      	ldr	r1, [sp, #4]
 23ff4da:	4602      	mov	r2, r0
 23ff4dc:	4620      	mov	r0, r4
 23ff4de:	f7ff ffcb 	bl	23ff478 <_ZN6String6concatEPKcj>
 23ff4e2:	2800      	cmp	r0, #0
 23ff4e4:	d0ee      	beq.n	23ff4c4 <_ZplRK15StringSumHelperPKc+0x6>
 23ff4e6:	e7f0      	b.n	23ff4ca <_ZplRK15StringSumHelperPKc+0xc>

023ff4e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff4e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff4ea:	2000      	movs	r0, #0
 23ff4ec:	4b04      	ldr	r3, [pc, #16]	; (23ff500 <_GLOBAL__sub_I_System+0x18>)
 23ff4ee:	601a      	str	r2, [r3, #0]
 23ff4f0:	4b04      	ldr	r3, [pc, #16]	; (23ff504 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff4f2:	4a05      	ldr	r2, [pc, #20]	; (23ff508 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff4f4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff4f8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff4fa:	f7ff b88d 	b.w	23fe618 <set_system_mode>
 23ff4fe:	bf00      	nop
 23ff500:	1007aeb4 	.word	0x1007aeb4
 23ff504:	1007aea8 	.word	0x1007aea8
 23ff508:	ffff0000 	.word	0xffff0000

023ff50c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff50c:	4b02      	ldr	r3, [pc, #8]	; (23ff518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff50e:	681a      	ldr	r2, [r3, #0]
 23ff510:	4b02      	ldr	r3, [pc, #8]	; (23ff51c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff512:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff514:	4770      	bx	lr
 23ff516:	bf00      	nop
 23ff518:	1007ae08 	.word	0x1007ae08
 23ff51c:	1007aeb8 	.word	0x1007aeb8

023ff520 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff520:	4770      	bx	lr

023ff522 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff522:	7441      	strb	r1, [r0, #17]
}
 23ff524:	4770      	bx	lr

023ff526 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff526:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff528:	7c00      	ldrb	r0, [r0, #16]
 23ff52a:	f7fe fff7 	bl	23fe51c <hal_usart_available_data_for_write>
}
 23ff52e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff532:	bd08      	pop	{r3, pc}

023ff534 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff534:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff536:	7c00      	ldrb	r0, [r0, #16]
 23ff538:	f7fe ffaa 	bl	23fe490 <hal_usart_available>
}
 23ff53c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff540:	bd08      	pop	{r3, pc}

023ff542 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff542:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff544:	7c00      	ldrb	r0, [r0, #16]
 23ff546:	f7fe ffbf 	bl	23fe4c8 <hal_usart_peek>
}
 23ff54a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff54e:	bd08      	pop	{r3, pc}

023ff550 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff550:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff552:	7c00      	ldrb	r0, [r0, #16]
 23ff554:	f7fe ffaa 	bl	23fe4ac <hal_usart_read>
}
 23ff558:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff55c:	bd08      	pop	{r3, pc}

023ff55e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff55e:	7c00      	ldrb	r0, [r0, #16]
 23ff560:	f7fe bfc0 	b.w	23fe4e4 <hal_usart_flush>

023ff564 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff566:	7c45      	ldrb	r5, [r0, #17]
{
 23ff568:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff56a:	b12d      	cbz	r5, 23ff578 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff56c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff56e:	b003      	add	sp, #12
 23ff570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff574:	f7fe bf7e 	b.w	23fe474 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff578:	7c00      	ldrb	r0, [r0, #16]
 23ff57a:	9101      	str	r1, [sp, #4]
 23ff57c:	f7fe ffce 	bl	23fe51c <hal_usart_available_data_for_write>
 23ff580:	2800      	cmp	r0, #0
 23ff582:	9901      	ldr	r1, [sp, #4]
 23ff584:	dcf2      	bgt.n	23ff56c <_ZN11USARTSerial5writeEh+0x8>
}
 23ff586:	4628      	mov	r0, r5
 23ff588:	b003      	add	sp, #12
 23ff58a:	bd30      	pop	{r4, r5, pc}

023ff58c <_ZN11USARTSerialD0Ev>:
 23ff58c:	b510      	push	{r4, lr}
 23ff58e:	4604      	mov	r4, r0
 23ff590:	2114      	movs	r1, #20
 23ff592:	f7fe fdfa 	bl	23fe18a <_ZdlPvj>
 23ff596:	4620      	mov	r0, r4
 23ff598:	bd10      	pop	{r4, pc}
	...

023ff59c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff59c:	b510      	push	{r4, lr}
 23ff59e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff5a2:	4604      	mov	r4, r0
 23ff5a4:	4608      	mov	r0, r1
 23ff5a6:	4611      	mov	r1, r2
 23ff5a8:	2200      	movs	r2, #0
 23ff5aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff5ae:	4b04      	ldr	r3, [pc, #16]	; (23ff5c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff5b0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff5b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff5b4:	2301      	movs	r3, #1
 23ff5b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff5b8:	f7fe ffbe 	bl	23fe538 <hal_usart_init_ex>
}
 23ff5bc:	4620      	mov	r0, r4
 23ff5be:	bd10      	pop	{r4, pc}
 23ff5c0:	023ffec4 	.word	0x023ffec4

023ff5c4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff5c4:	7c00      	ldrb	r0, [r0, #16]
 23ff5c6:	f7fe bf9b 	b.w	23fe500 <hal_usart_is_enabled>

023ff5ca <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff5ca:	7441      	strb	r1, [r0, #17]
}
 23ff5cc:	4770      	bx	lr

023ff5ce <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff5ce:	4770      	bx	lr

023ff5d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff5d0:	4770      	bx	lr

023ff5d2 <_ZN9USBSerial4readEv>:
{
 23ff5d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff5d4:	2100      	movs	r1, #0
 23ff5d6:	7c00      	ldrb	r0, [r0, #16]
 23ff5d8:	f7fe fff4 	bl	23fe5c4 <HAL_USB_USART_Receive_Data>
}
 23ff5dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5e0:	bd08      	pop	{r3, pc}

023ff5e2 <_ZN9USBSerial4peekEv>:
{
 23ff5e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff5e4:	2101      	movs	r1, #1
 23ff5e6:	7c00      	ldrb	r0, [r0, #16]
 23ff5e8:	f7fe ffec 	bl	23fe5c4 <HAL_USB_USART_Receive_Data>
}
 23ff5ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5f0:	bd08      	pop	{r3, pc}

023ff5f2 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff5f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff5f4:	7c00      	ldrb	r0, [r0, #16]
 23ff5f6:	f7fe ffd7 	bl	23fe5a8 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff5fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5fe:	bd08      	pop	{r3, pc}

023ff600 <_ZN9USBSerial9availableEv>:
{
 23ff600:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff602:	7c00      	ldrb	r0, [r0, #16]
 23ff604:	f7fe ffc2 	bl	23fe58c <HAL_USB_USART_Available_Data>
}
 23ff608:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff60c:	bd08      	pop	{r3, pc}

023ff60e <_ZN9USBSerial5writeEh>:
{
 23ff60e:	b513      	push	{r0, r1, r4, lr}
 23ff610:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff612:	7c00      	ldrb	r0, [r0, #16]
{
 23ff614:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff616:	f7fe ffc7 	bl	23fe5a8 <HAL_USB_USART_Available_Data_For_Write>
 23ff61a:	2800      	cmp	r0, #0
 23ff61c:	9901      	ldr	r1, [sp, #4]
 23ff61e:	dc01      	bgt.n	23ff624 <_ZN9USBSerial5writeEh+0x16>
 23ff620:	7c60      	ldrb	r0, [r4, #17]
 23ff622:	b120      	cbz	r0, 23ff62e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff624:	7c20      	ldrb	r0, [r4, #16]
 23ff626:	f7fe ffdb 	bl	23fe5e0 <HAL_USB_USART_Send_Data>
 23ff62a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff62e:	b002      	add	sp, #8
 23ff630:	bd10      	pop	{r4, pc}

023ff632 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff632:	7c00      	ldrb	r0, [r0, #16]
 23ff634:	f7fe bfe2 	b.w	23fe5fc <HAL_USB_USART_Flush_Data>

023ff638 <_ZN9USBSerialD0Ev>:
 23ff638:	b510      	push	{r4, lr}
 23ff63a:	4604      	mov	r4, r0
 23ff63c:	2114      	movs	r1, #20
 23ff63e:	f7fe fda4 	bl	23fe18a <_ZdlPvj>
 23ff642:	4620      	mov	r0, r4
 23ff644:	bd10      	pop	{r4, pc}
	...

023ff648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff648:	b510      	push	{r4, lr}
 23ff64a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff64e:	4604      	mov	r4, r0
 23ff650:	4608      	mov	r0, r1
 23ff652:	2100      	movs	r1, #0
 23ff654:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff658:	4b04      	ldr	r3, [pc, #16]	; (23ff66c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff65a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff65c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff65e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff660:	4611      	mov	r1, r2
  _blocking = true;
 23ff662:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff664:	f7fe ff76 	bl	23fe554 <HAL_USB_USART_Init>
}
 23ff668:	4620      	mov	r0, r4
 23ff66a:	bd10      	pop	{r4, pc}
 23ff66c:	023ffef4 	.word	0x023ffef4

023ff670 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff670:	2200      	movs	r2, #0
 23ff672:	7c00      	ldrb	r0, [r0, #16]
 23ff674:	f7fe bf7c 	b.w	23fe570 <HAL_USB_USART_Begin>

023ff678 <_Z19acquireSerialBufferv>:
{
 23ff678:	b510      	push	{r4, lr}
 23ff67a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff67c:	2214      	movs	r2, #20
 23ff67e:	2100      	movs	r1, #0
 23ff680:	f000 fac0 	bl	23ffc04 <memset>
}
 23ff684:	4620      	mov	r0, r4
 23ff686:	bd10      	pop	{r4, pc}

023ff688 <_Z16_fetch_usbserialv>:
{
 23ff688:	b510      	push	{r4, lr}
 23ff68a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff68c:	a803      	add	r0, sp, #12
 23ff68e:	f7ff fff3 	bl	23ff678 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff692:	4c0c      	ldr	r4, [pc, #48]	; (23ff6c4 <_Z16_fetch_usbserialv+0x3c>)
 23ff694:	e8d4 1f8f 	ldab	r1, [r4]
 23ff698:	f011 0101 	ands.w	r1, r1, #1
 23ff69c:	d10f      	bne.n	23ff6be <_Z16_fetch_usbserialv+0x36>
 23ff69e:	4620      	mov	r0, r4
 23ff6a0:	9101      	str	r1, [sp, #4]
 23ff6a2:	f7fe fd74 	bl	23fe18e <__cxa_guard_acquire>
 23ff6a6:	9901      	ldr	r1, [sp, #4]
 23ff6a8:	b148      	cbz	r0, 23ff6be <_Z16_fetch_usbserialv+0x36>
 23ff6aa:	aa03      	add	r2, sp, #12
 23ff6ac:	4806      	ldr	r0, [pc, #24]	; (23ff6c8 <_Z16_fetch_usbserialv+0x40>)
 23ff6ae:	f7ff ffcb 	bl	23ff648 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff6b2:	4620      	mov	r0, r4
 23ff6b4:	f7fe fd70 	bl	23fe198 <__cxa_guard_release>
 23ff6b8:	4804      	ldr	r0, [pc, #16]	; (23ff6cc <_Z16_fetch_usbserialv+0x44>)
 23ff6ba:	f000 fa90 	bl	23ffbde <atexit>
	return _usbserial;
}
 23ff6be:	4802      	ldr	r0, [pc, #8]	; (23ff6c8 <_Z16_fetch_usbserialv+0x40>)
 23ff6c0:	b008      	add	sp, #32
 23ff6c2:	bd10      	pop	{r4, pc}
 23ff6c4:	1007aebc 	.word	0x1007aebc
 23ff6c8:	1007aec0 	.word	0x1007aec0
 23ff6cc:	023ff5cf 	.word	0x023ff5cf

023ff6d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff6d0:	2200      	movs	r2, #0
 23ff6d2:	6840      	ldr	r0, [r0, #4]
 23ff6d4:	4611      	mov	r1, r2
 23ff6d6:	f7ff b847 	b.w	23fe768 <network_ready>

023ff6da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff6da:	2200      	movs	r2, #0
 23ff6dc:	6840      	ldr	r0, [r0, #4]
 23ff6de:	4611      	mov	r1, r2
 23ff6e0:	f7ff b87a 	b.w	23fe7d8 <network_listening>

023ff6e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff6e4:	2200      	movs	r2, #0
 23ff6e6:	6840      	ldr	r0, [r0, #4]
 23ff6e8:	4611      	mov	r1, r2
 23ff6ea:	f7ff b891 	b.w	23fe810 <network_get_listen_timeout>

023ff6ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff6ee:	2200      	movs	r2, #0
 23ff6f0:	6840      	ldr	r0, [r0, #4]
 23ff6f2:	f7ff b87f 	b.w	23fe7f4 <network_set_listen_timeout>

023ff6f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff6f6:	2200      	movs	r2, #0
 23ff6f8:	6840      	ldr	r0, [r0, #4]
 23ff6fa:	f081 0101 	eor.w	r1, r1, #1
 23ff6fe:	f7ff b85d 	b.w	23fe7bc <network_listen>

023ff702 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff702:	2300      	movs	r3, #0
 23ff704:	6840      	ldr	r0, [r0, #4]
 23ff706:	461a      	mov	r2, r3
 23ff708:	4619      	mov	r1, r3
 23ff70a:	f7ff b849 	b.w	23fe7a0 <network_off>

023ff70e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff70e:	2300      	movs	r3, #0
 23ff710:	6840      	ldr	r0, [r0, #4]
 23ff712:	461a      	mov	r2, r3
 23ff714:	4619      	mov	r1, r3
 23ff716:	f7ff b835 	b.w	23fe784 <network_on>

023ff71a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff71a:	2200      	movs	r2, #0
 23ff71c:	6840      	ldr	r0, [r0, #4]
 23ff71e:	4611      	mov	r1, r2
 23ff720:	f7ff b806 	b.w	23fe730 <network_connecting>

023ff724 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff724:	2200      	movs	r2, #0
 23ff726:	2102      	movs	r1, #2
 23ff728:	6840      	ldr	r0, [r0, #4]
 23ff72a:	f7ff b80f 	b.w	23fe74c <network_disconnect>

023ff72e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff72e:	2300      	movs	r3, #0
 23ff730:	6840      	ldr	r0, [r0, #4]
 23ff732:	461a      	mov	r2, r3
 23ff734:	f7fe bfee 	b.w	23fe714 <network_connect>

023ff738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff738:	2204      	movs	r2, #4
 23ff73a:	4b02      	ldr	r3, [pc, #8]	; (23ff744 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff73c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff73e:	4a02      	ldr	r2, [pc, #8]	; (23ff748 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff740:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff742:	4770      	bx	lr
 23ff744:	1007aed4 	.word	0x1007aed4
 23ff748:	023fff24 	.word	0x023fff24

023ff74c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23ff74c:	b510      	push	{r4, lr}
 23ff74e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23ff750:	f7fe fcf2 	bl	23fe138 <strlen>
 23ff754:	3801      	subs	r0, #1
 23ff756:	1823      	adds	r3, r4, r0
 23ff758:	4620      	mov	r0, r4
	while(i<j){
 23ff75a:	4283      	cmp	r3, r0
 23ff75c:	d906      	bls.n	23ff76c <_Z11str_reversePc+0x20>
		c = *i;
 23ff75e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23ff760:	7819      	ldrb	r1, [r3, #0]
 23ff762:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23ff766:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23ff76a:	e7f6      	b.n	23ff75a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23ff76c:	bd10      	pop	{r4, pc}

023ff76e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23ff76e:	b570      	push	{r4, r5, r6, lr}
 23ff770:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23ff772:	1e91      	subs	r1, r2, #2
 23ff774:	2922      	cmp	r1, #34	; 0x22
 23ff776:	d81d      	bhi.n	23ff7b4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23ff778:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23ff77a:	b930      	cbnz	r0, 23ff78a <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23ff77c:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23ff77e:	4423      	add	r3, r4
 23ff780:	429d      	cmp	r5, r3
 23ff782:	d210      	bcs.n	23ff7a6 <ultoa+0x38>
            *ptr++ = '0';
 23ff784:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23ff788:	e7fa      	b.n	23ff780 <ultoa+0x12>
            result.quot = a/radix;
 23ff78a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23ff78e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23ff792:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23ff794:	2809      	cmp	r0, #9
                *ptr += '0';
 23ff796:	bf94      	ite	ls
 23ff798:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23ff79a:	3157      	addhi	r1, #87	; 0x57
 23ff79c:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23ff79e:	4630      	mov	r0, r6
 23ff7a0:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23ff7a4:	e7e9      	b.n	23ff77a <ultoa+0xc>

	*ptr = '\0';
 23ff7a6:	2300      	movs	r3, #0
	str_reverse(buffer);
 23ff7a8:	4620      	mov	r0, r4
	*ptr = '\0';
 23ff7aa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23ff7ac:	f7ff ffce 	bl	23ff74c <_Z11str_reversePc>
	return buffer;
 23ff7b0:	4620      	mov	r0, r4
}
 23ff7b2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23ff7b4:	2000      	movs	r0, #0
 23ff7b6:	e7fc      	b.n	23ff7b2 <ultoa+0x44>

023ff7b8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff7b8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23ff7ba:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff7bc:	460c      	mov	r4, r1
 23ff7be:	4615      	mov	r5, r2
	if(a<0){
 23ff7c0:	da0d      	bge.n	23ff7de <itoa+0x26>
		*buffer = '-';
 23ff7c2:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23ff7c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23ff7c8:	bf0c      	ite	eq
 23ff7ca:	4618      	moveq	r0, r3
 23ff7cc:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23ff7ce:	2301      	movs	r3, #1
		*buffer = '-';
 23ff7d0:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23ff7d2:	462a      	mov	r2, r5
 23ff7d4:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23ff7d6:	f7ff ffca 	bl	23ff76e <ultoa>
	}
	return buffer;
}
 23ff7da:	4620      	mov	r0, r4
 23ff7dc:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23ff7de:	2301      	movs	r3, #1
 23ff7e0:	e7f9      	b.n	23ff7d6 <itoa+0x1e>
	...

023ff7e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff7e4:	4b01      	ldr	r3, [pc, #4]	; (23ff7ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff7e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff7e8:	4770      	bx	lr
 23ff7ea:	bf00      	nop
 23ff7ec:	1007ae0c 	.word	0x1007ae0c

023ff7f0 <serialEventRun>:
{
 23ff7f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff7f2:	4b0f      	ldr	r3, [pc, #60]	; (23ff830 <serialEventRun+0x40>)
 23ff7f4:	b143      	cbz	r3, 23ff808 <serialEventRun+0x18>
 23ff7f6:	f7ff ff47 	bl	23ff688 <_Z16_fetch_usbserialv>
 23ff7fa:	6803      	ldr	r3, [r0, #0]
 23ff7fc:	691b      	ldr	r3, [r3, #16]
 23ff7fe:	4798      	blx	r3
 23ff800:	2800      	cmp	r0, #0
 23ff802:	dd01      	ble.n	23ff808 <serialEventRun+0x18>
        serialEvent();
 23ff804:	e000      	b.n	23ff808 <serialEventRun+0x18>
 23ff806:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff808:	4b0a      	ldr	r3, [pc, #40]	; (23ff834 <serialEventRun+0x44>)
 23ff80a:	b143      	cbz	r3, 23ff81e <serialEventRun+0x2e>
 23ff80c:	f000 f952 	bl	23ffab4 <_Z22__fetch_global_Serial1v>
 23ff810:	6803      	ldr	r3, [r0, #0]
 23ff812:	691b      	ldr	r3, [r3, #16]
 23ff814:	4798      	blx	r3
 23ff816:	2800      	cmp	r0, #0
 23ff818:	dd01      	ble.n	23ff81e <serialEventRun+0x2e>
        serialEvent1();
 23ff81a:	e000      	b.n	23ff81e <serialEventRun+0x2e>
 23ff81c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff81e:	4b06      	ldr	r3, [pc, #24]	; (23ff838 <serialEventRun+0x48>)
 23ff820:	b10b      	cbz	r3, 23ff826 <serialEventRun+0x36>
 23ff822:	f000 f98d 	bl	23ffb40 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff826:	4b05      	ldr	r3, [pc, #20]	; (23ff83c <serialEventRun+0x4c>)
 23ff828:	b10b      	cbz	r3, 23ff82e <serialEventRun+0x3e>
 23ff82a:	f000 f9bf 	bl	23ffbac <_Z15serialEventRun3v>
}
 23ff82e:	bd08      	pop	{r3, pc}
	...

023ff840 <_post_loop>:
{
 23ff840:	b508      	push	{r3, lr}
	serialEventRun();
 23ff842:	f7ff ffd5 	bl	23ff7f0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff846:	f7fe fd43 	bl	23fe2d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff84a:	4b01      	ldr	r3, [pc, #4]	; (23ff850 <_post_loop+0x10>)
 23ff84c:	6018      	str	r0, [r3, #0]
}
 23ff84e:	bd08      	pop	{r3, pc}
 23ff850:	1007aef0 	.word	0x1007aef0

023ff854 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff854:	4805      	ldr	r0, [pc, #20]	; (23ff86c <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff856:	4a06      	ldr	r2, [pc, #24]	; (23ff870 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff858:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff85a:	1a12      	subs	r2, r2, r0
 23ff85c:	4905      	ldr	r1, [pc, #20]	; (23ff874 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff85e:	f000 f9c4 	bl	23ffbea <memcpy>
    __backup_sram_signature = signature;
 23ff862:	4b05      	ldr	r3, [pc, #20]	; (23ff878 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff864:	4a05      	ldr	r2, [pc, #20]	; (23ff87c <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff866:	601a      	str	r2, [r3, #0]
}
 23ff868:	bd08      	pop	{r3, pc}
 23ff86a:	bf00      	nop
 23ff86c:	1007b400 	.word	0x1007b400
 23ff870:	1007b404 	.word	0x1007b404
 23ff874:	085fefd8 	.word	0x085fefd8
 23ff878:	1007b400 	.word	0x1007b400
 23ff87c:	9a271c1e 	.word	0x9a271c1e

023ff880 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff880:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff882:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff884:	461a      	mov	r2, r3
 23ff886:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff88a:	9300      	str	r3, [sp, #0]
 23ff88c:	f7fe ff0a 	bl	23fe6a4 <system_ctrl_set_result>
}
 23ff890:	b003      	add	sp, #12
 23ff892:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff898 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff898:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff89a:	8843      	ldrh	r3, [r0, #2]
 23ff89c:	2b0a      	cmp	r3, #10
 23ff89e:	d008      	beq.n	23ff8b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff8a0:	2b50      	cmp	r3, #80	; 0x50
 23ff8a2:	d10b      	bne.n	23ff8bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff8a4:	4b09      	ldr	r3, [pc, #36]	; (23ff8cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff8a6:	681b      	ldr	r3, [r3, #0]
 23ff8a8:	b14b      	cbz	r3, 23ff8be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff8aa:	b003      	add	sp, #12
 23ff8ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff8b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff8b2:	f7ff ffe5 	bl	23ff880 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff8b6:	b003      	add	sp, #12
 23ff8b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8bc:	2300      	movs	r3, #0
 23ff8be:	461a      	mov	r2, r3
 23ff8c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8c4:	9300      	str	r3, [sp, #0]
 23ff8c6:	f7fe feed 	bl	23fe6a4 <system_ctrl_set_result>
}
 23ff8ca:	e7f4      	b.n	23ff8b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff8cc:	1007aee0 	.word	0x1007aee0

023ff8d0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8d0:	2100      	movs	r1, #0
{
 23ff8d2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8d4:	4811      	ldr	r0, [pc, #68]	; (23ff91c <module_user_init_hook+0x4c>)
 23ff8d6:	f7ff f819 	bl	23fe90c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff8da:	4b11      	ldr	r3, [pc, #68]	; (23ff920 <module_user_init_hook+0x50>)
 23ff8dc:	681a      	ldr	r2, [r3, #0]
 23ff8de:	4b11      	ldr	r3, [pc, #68]	; (23ff924 <module_user_init_hook+0x54>)
 23ff8e0:	429a      	cmp	r2, r3
 23ff8e2:	bf0c      	ite	eq
 23ff8e4:	2201      	moveq	r2, #1
 23ff8e6:	2200      	movne	r2, #0
 23ff8e8:	4b0f      	ldr	r3, [pc, #60]	; (23ff928 <module_user_init_hook+0x58>)
 23ff8ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff8ec:	d001      	beq.n	23ff8f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff8ee:	f7ff ffb1 	bl	23ff854 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff8f2:	f7fe fcdf 	bl	23fe2b4 <HAL_RNG_GetRandomNumber>
 23ff8f6:	4604      	mov	r4, r0
    srand(seed);
 23ff8f8:	f000 f98c 	bl	23ffc14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff8fc:	4b0b      	ldr	r3, [pc, #44]	; (23ff92c <module_user_init_hook+0x5c>)
 23ff8fe:	b113      	cbz	r3, 23ff906 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff900:	4620      	mov	r0, r4
 23ff902:	e000      	b.n	23ff906 <module_user_init_hook+0x36>
 23ff904:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff906:	2100      	movs	r1, #0
 23ff908:	4808      	ldr	r0, [pc, #32]	; (23ff92c <module_user_init_hook+0x5c>)
 23ff90a:	f7fe fef5 	bl	23fe6f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff912:	2100      	movs	r1, #0
 23ff914:	4806      	ldr	r0, [pc, #24]	; (23ff930 <module_user_init_hook+0x60>)
 23ff916:	f7fe beb7 	b.w	23fe688 <system_ctrl_set_app_request_handler>
 23ff91a:	bf00      	nop
 23ff91c:	023ff7e5 	.word	0x023ff7e5
 23ff920:	1007b400 	.word	0x1007b400
 23ff924:	9a271c1e 	.word	0x9a271c1e
 23ff928:	1007aedc 	.word	0x1007aedc
 23ff92c:	00000000 	.word	0x00000000
 23ff930:	023ff899 	.word	0x023ff899

023ff934 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff934:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff938:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff93a:	d902      	bls.n	23ff942 <pinAvailable+0xe>
    return false;
 23ff93c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff93e:	b003      	add	sp, #12
 23ff940:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff942:	f1a0 030f 	sub.w	r3, r0, #15
 23ff946:	2b02      	cmp	r3, #2
 23ff948:	d90b      	bls.n	23ff962 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff94a:	2801      	cmp	r0, #1
 23ff94c:	d821      	bhi.n	23ff992 <pinAvailable+0x5e>
 23ff94e:	f000 f85d 	bl	23ffa0c <_Z19__fetch_global_Wirev>
 23ff952:	2100      	movs	r1, #0
 23ff954:	7c00      	ldrb	r0, [r0, #16]
 23ff956:	f7fe fd2b 	bl	23fe3b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff95a:	f080 0001 	eor.w	r0, r0, #1
 23ff95e:	b2c0      	uxtb	r0, r0
 23ff960:	e7ed      	b.n	23ff93e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff962:	4d11      	ldr	r5, [pc, #68]	; (23ff9a8 <pinAvailable+0x74>)
 23ff964:	e8d5 1f8f 	ldab	r1, [r5]
 23ff968:	f011 0101 	ands.w	r1, r1, #1
 23ff96c:	d10b      	bne.n	23ff986 <pinAvailable+0x52>
 23ff96e:	4628      	mov	r0, r5
 23ff970:	9101      	str	r1, [sp, #4]
 23ff972:	f7fe fc0c 	bl	23fe18e <__cxa_guard_acquire>
 23ff976:	9901      	ldr	r1, [sp, #4]
 23ff978:	b128      	cbz	r0, 23ff986 <pinAvailable+0x52>
 23ff97a:	480c      	ldr	r0, [pc, #48]	; (23ff9ac <pinAvailable+0x78>)
 23ff97c:	f7ff fcd4 	bl	23ff328 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff980:	4628      	mov	r0, r5
 23ff982:	f7fe fc09 	bl	23fe198 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff986:	4b09      	ldr	r3, [pc, #36]	; (23ff9ac <pinAvailable+0x78>)
 23ff988:	7818      	ldrb	r0, [r3, #0]
 23ff98a:	f7fe fd65 	bl	23fe458 <hal_spi_is_enabled>
 23ff98e:	2800      	cmp	r0, #0
 23ff990:	d1d4      	bne.n	23ff93c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff992:	3c08      	subs	r4, #8
 23ff994:	2c01      	cmp	r4, #1
 23ff996:	d805      	bhi.n	23ff9a4 <pinAvailable+0x70>
 23ff998:	f000 f88c 	bl	23ffab4 <_Z22__fetch_global_Serial1v>
 23ff99c:	7c00      	ldrb	r0, [r0, #16]
 23ff99e:	f7fe fdaf 	bl	23fe500 <hal_usart_is_enabled>
 23ff9a2:	e7da      	b.n	23ff95a <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff9a4:	2001      	movs	r0, #1
 23ff9a6:	e7ca      	b.n	23ff93e <pinAvailable+0xa>
 23ff9a8:	1007aee4 	.word	0x1007aee4
 23ff9ac:	1007aee8 	.word	0x1007aee8

023ff9b0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ff9b0:	b510      	push	{r4, lr}
 23ff9b2:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ff9b4:	f7ff ffbe 	bl	23ff934 <pinAvailable>
 23ff9b8:	b150      	cbz	r0, 23ff9d0 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ff9ba:	2103      	movs	r1, #3
 23ff9bc:	4620      	mov	r0, r4
 23ff9be:	f7fe fc95 	bl	23fe2ec <hal_pin_validate_function>
 23ff9c2:	2803      	cmp	r0, #3
 23ff9c4:	d104      	bne.n	23ff9d0 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ff9c6:	4620      	mov	r0, r4
}
 23ff9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ff9cc:	f7fe bc9c 	b.w	23fe308 <hal_adc_read>
}
 23ff9d0:	2000      	movs	r0, #0
 23ff9d2:	bd10      	pop	{r4, pc}

023ff9d4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9d4:	4770      	bx	lr
	...

023ff9d8 <_Z17acquireWireBufferv>:
{
 23ff9d8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff9da:	4b0a      	ldr	r3, [pc, #40]	; (23ffa04 <_Z17acquireWireBufferv+0x2c>)
{
 23ff9dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff9de:	6003      	str	r3, [r0, #0]
 23ff9e0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9e2:	4909      	ldr	r1, [pc, #36]	; (23ffa08 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff9e4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9e6:	2020      	movs	r0, #32
 23ff9e8:	f000 f8f4 	bl	23ffbd4 <_ZnajRKSt9nothrow_t>
	};
 23ff9ec:	2520      	movs	r5, #32
 23ff9ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9f0:	4905      	ldr	r1, [pc, #20]	; (23ffa08 <_Z17acquireWireBufferv+0x30>)
 23ff9f2:	4628      	mov	r0, r5
	};
 23ff9f4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9f6:	f000 f8ed 	bl	23ffbd4 <_ZnajRKSt9nothrow_t>
	};
 23ff9fa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff9fe:	4620      	mov	r0, r4
 23ffa00:	bd38      	pop	{r3, r4, r5, pc}
 23ffa02:	bf00      	nop
 23ffa04:	00010018 	.word	0x00010018
 23ffa08:	023fff58 	.word	0x023fff58

023ffa0c <_Z19__fetch_global_Wirev>:
{
 23ffa0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa0e:	4d0e      	ldr	r5, [pc, #56]	; (23ffa48 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa10:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa12:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa16:	f011 0401 	ands.w	r4, r1, #1
 23ffa1a:	d111      	bne.n	23ffa40 <_Z19__fetch_global_Wirev+0x34>
 23ffa1c:	4628      	mov	r0, r5
 23ffa1e:	f7fe fbb6 	bl	23fe18e <__cxa_guard_acquire>
 23ffa22:	b168      	cbz	r0, 23ffa40 <_Z19__fetch_global_Wirev+0x34>
 23ffa24:	4668      	mov	r0, sp
 23ffa26:	f7ff ffd7 	bl	23ff9d8 <_Z17acquireWireBufferv>
 23ffa2a:	466a      	mov	r2, sp
 23ffa2c:	4621      	mov	r1, r4
 23ffa2e:	4807      	ldr	r0, [pc, #28]	; (23ffa4c <_Z19__fetch_global_Wirev+0x40>)
 23ffa30:	f7ff faca 	bl	23fefc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa34:	4628      	mov	r0, r5
 23ffa36:	f7fe fbaf 	bl	23fe198 <__cxa_guard_release>
 23ffa3a:	4805      	ldr	r0, [pc, #20]	; (23ffa50 <_Z19__fetch_global_Wirev+0x44>)
 23ffa3c:	f000 f8cf 	bl	23ffbde <atexit>
	return wire;
}
 23ffa40:	4802      	ldr	r0, [pc, #8]	; (23ffa4c <_Z19__fetch_global_Wirev+0x40>)
 23ffa42:	b007      	add	sp, #28
 23ffa44:	bd30      	pop	{r4, r5, pc}
 23ffa46:	bf00      	nop
 23ffa48:	1007aef4 	.word	0x1007aef4
 23ffa4c:	1007aef8 	.word	0x1007aef8
 23ffa50:	023ff9d5 	.word	0x023ff9d5

023ffa54 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa54:	4770      	bx	lr
	...

023ffa58 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa58:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffa5a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa5c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffa5e:	462a      	mov	r2, r5
 23ffa60:	2100      	movs	r1, #0
 23ffa62:	f000 f8cf 	bl	23ffc04 <memset>
 23ffa66:	8025      	strh	r5, [r4, #0]
 23ffa68:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa6a:	4907      	ldr	r1, [pc, #28]	; (23ffa88 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffa6c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffa6e:	8125      	strh	r5, [r4, #8]
 23ffa70:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa72:	f000 f8af 	bl	23ffbd4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa76:	4904      	ldr	r1, [pc, #16]	; (23ffa88 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffa78:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa7a:	4628      	mov	r0, r5
 23ffa7c:	f000 f8aa 	bl	23ffbd4 <_ZnajRKSt9nothrow_t>
    };
 23ffa80:	60e0      	str	r0, [r4, #12]
}
 23ffa82:	4620      	mov	r0, r4
 23ffa84:	bd38      	pop	{r3, r4, r5, pc}
 23ffa86:	bf00      	nop
 23ffa88:	023fff58 	.word	0x023fff58

023ffa8c <__tcf_2>:
 23ffa8c:	4770      	bx	lr

023ffa8e <__tcf_1>:
 23ffa8e:	4770      	bx	lr

023ffa90 <_Z20acquireSerial1Bufferv>:
{
 23ffa90:	b510      	push	{r4, lr}
 23ffa92:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffa94:	f7ff ffe0 	bl	23ffa58 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffa98:	4620      	mov	r0, r4
 23ffa9a:	bd10      	pop	{r4, pc}

023ffa9c <_Z20acquireSerial2Bufferv>:
 23ffa9c:	b510      	push	{r4, lr}
 23ffa9e:	4604      	mov	r4, r0
 23ffaa0:	f7ff ffda 	bl	23ffa58 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffaa4:	4620      	mov	r0, r4
 23ffaa6:	bd10      	pop	{r4, pc}

023ffaa8 <_Z20acquireSerial3Bufferv>:
 23ffaa8:	b510      	push	{r4, lr}
 23ffaaa:	4604      	mov	r4, r0
 23ffaac:	f7ff ffd4 	bl	23ffa58 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffab0:	4620      	mov	r0, r4
 23ffab2:	bd10      	pop	{r4, pc}

023ffab4 <_Z22__fetch_global_Serial1v>:
{
 23ffab4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffab6:	4d0e      	ldr	r5, [pc, #56]	; (23ffaf0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffab8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffaba:	e8d5 1f8f 	ldab	r1, [r5]
 23ffabe:	f011 0401 	ands.w	r4, r1, #1
 23ffac2:	d111      	bne.n	23ffae8 <_Z22__fetch_global_Serial1v+0x34>
 23ffac4:	4628      	mov	r0, r5
 23ffac6:	f7fe fb62 	bl	23fe18e <__cxa_guard_acquire>
 23ffaca:	b168      	cbz	r0, 23ffae8 <_Z22__fetch_global_Serial1v+0x34>
 23ffacc:	a801      	add	r0, sp, #4
 23fface:	f7ff ffdf 	bl	23ffa90 <_Z20acquireSerial1Bufferv>
 23ffad2:	4621      	mov	r1, r4
 23ffad4:	aa01      	add	r2, sp, #4
 23ffad6:	4807      	ldr	r0, [pc, #28]	; (23ffaf4 <_Z22__fetch_global_Serial1v+0x40>)
 23ffad8:	f7ff fd60 	bl	23ff59c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffadc:	4628      	mov	r0, r5
 23ffade:	f7fe fb5b 	bl	23fe198 <__cxa_guard_release>
 23ffae2:	4805      	ldr	r0, [pc, #20]	; (23ffaf8 <_Z22__fetch_global_Serial1v+0x44>)
 23ffae4:	f000 f87b 	bl	23ffbde <atexit>
    return serial1;
}
 23ffae8:	4802      	ldr	r0, [pc, #8]	; (23ffaf4 <_Z22__fetch_global_Serial1v+0x40>)
 23ffaea:	b007      	add	sp, #28
 23ffaec:	bd30      	pop	{r4, r5, pc}
 23ffaee:	bf00      	nop
 23ffaf0:	1007af0c 	.word	0x1007af0c
 23ffaf4:	1007af18 	.word	0x1007af18
 23ffaf8:	023ffa55 	.word	0x023ffa55

023ffafc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffafc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffafe:	4c0d      	ldr	r4, [pc, #52]	; (23ffb34 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb00:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb02:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb06:	07db      	lsls	r3, r3, #31
 23ffb08:	d411      	bmi.n	23ffb2e <_Z22__fetch_global_Serial2v+0x32>
 23ffb0a:	4620      	mov	r0, r4
 23ffb0c:	f7fe fb3f 	bl	23fe18e <__cxa_guard_acquire>
 23ffb10:	b168      	cbz	r0, 23ffb2e <_Z22__fetch_global_Serial2v+0x32>
 23ffb12:	a801      	add	r0, sp, #4
 23ffb14:	f7ff ffc2 	bl	23ffa9c <_Z20acquireSerial2Bufferv>
 23ffb18:	2101      	movs	r1, #1
 23ffb1a:	aa01      	add	r2, sp, #4
 23ffb1c:	4806      	ldr	r0, [pc, #24]	; (23ffb38 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb1e:	f7ff fd3d 	bl	23ff59c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb22:	4620      	mov	r0, r4
 23ffb24:	f7fe fb38 	bl	23fe198 <__cxa_guard_release>
 23ffb28:	4804      	ldr	r0, [pc, #16]	; (23ffb3c <_Z22__fetch_global_Serial2v+0x40>)
 23ffb2a:	f000 f858 	bl	23ffbde <atexit>
	return serial2;
}
 23ffb2e:	4802      	ldr	r0, [pc, #8]	; (23ffb38 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb30:	b006      	add	sp, #24
 23ffb32:	bd10      	pop	{r4, pc}
 23ffb34:	1007af10 	.word	0x1007af10
 23ffb38:	1007af2c 	.word	0x1007af2c
 23ffb3c:	023ffa8f 	.word	0x023ffa8f

023ffb40 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffb40:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffb42:	f7ff ffdb 	bl	23ffafc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb46:	4b07      	ldr	r3, [pc, #28]	; (23ffb64 <_Z15serialEventRun2v+0x24>)
 23ffb48:	4604      	mov	r4, r0
 23ffb4a:	b153      	cbz	r3, 23ffb62 <_Z15serialEventRun2v+0x22>
 23ffb4c:	f7ff fd3a 	bl	23ff5c4 <_ZN11USARTSerial9isEnabledEv>
 23ffb50:	b138      	cbz	r0, 23ffb62 <_Z15serialEventRun2v+0x22>
 23ffb52:	6823      	ldr	r3, [r4, #0]
 23ffb54:	4620      	mov	r0, r4
 23ffb56:	691b      	ldr	r3, [r3, #16]
 23ffb58:	4798      	blx	r3
 23ffb5a:	2800      	cmp	r0, #0
 23ffb5c:	dd01      	ble.n	23ffb62 <_Z15serialEventRun2v+0x22>
        handler();
 23ffb5e:	e000      	b.n	23ffb62 <_Z15serialEventRun2v+0x22>
 23ffb60:	bf00      	nop
}
 23ffb62:	bd10      	pop	{r4, pc}
 23ffb64:	00000000 	.word	0x00000000

023ffb68 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffb68:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb6a:	4c0d      	ldr	r4, [pc, #52]	; (23ffba0 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffb6c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb6e:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb72:	07db      	lsls	r3, r3, #31
 23ffb74:	d411      	bmi.n	23ffb9a <_Z22__fetch_global_Serial3v+0x32>
 23ffb76:	4620      	mov	r0, r4
 23ffb78:	f7fe fb09 	bl	23fe18e <__cxa_guard_acquire>
 23ffb7c:	b168      	cbz	r0, 23ffb9a <_Z22__fetch_global_Serial3v+0x32>
 23ffb7e:	a801      	add	r0, sp, #4
 23ffb80:	f7ff ff92 	bl	23ffaa8 <_Z20acquireSerial3Bufferv>
 23ffb84:	2102      	movs	r1, #2
 23ffb86:	aa01      	add	r2, sp, #4
 23ffb88:	4806      	ldr	r0, [pc, #24]	; (23ffba4 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb8a:	f7ff fd07 	bl	23ff59c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb8e:	4620      	mov	r0, r4
 23ffb90:	f7fe fb02 	bl	23fe198 <__cxa_guard_release>
 23ffb94:	4804      	ldr	r0, [pc, #16]	; (23ffba8 <_Z22__fetch_global_Serial3v+0x40>)
 23ffb96:	f000 f822 	bl	23ffbde <atexit>
	return serial3;
}
 23ffb9a:	4802      	ldr	r0, [pc, #8]	; (23ffba4 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb9c:	b006      	add	sp, #24
 23ffb9e:	bd10      	pop	{r4, pc}
 23ffba0:	1007af14 	.word	0x1007af14
 23ffba4:	1007af40 	.word	0x1007af40
 23ffba8:	023ffa8d 	.word	0x023ffa8d

023ffbac <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffbac:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffbae:	f7ff ffdb 	bl	23ffb68 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbb2:	4b07      	ldr	r3, [pc, #28]	; (23ffbd0 <_Z15serialEventRun3v+0x24>)
 23ffbb4:	4604      	mov	r4, r0
 23ffbb6:	b153      	cbz	r3, 23ffbce <_Z15serialEventRun3v+0x22>
 23ffbb8:	f7ff fd04 	bl	23ff5c4 <_ZN11USARTSerial9isEnabledEv>
 23ffbbc:	b138      	cbz	r0, 23ffbce <_Z15serialEventRun3v+0x22>
 23ffbbe:	6823      	ldr	r3, [r4, #0]
 23ffbc0:	4620      	mov	r0, r4
 23ffbc2:	691b      	ldr	r3, [r3, #16]
 23ffbc4:	4798      	blx	r3
 23ffbc6:	2800      	cmp	r0, #0
 23ffbc8:	dd01      	ble.n	23ffbce <_Z15serialEventRun3v+0x22>
        handler();
 23ffbca:	e000      	b.n	23ffbce <_Z15serialEventRun3v+0x22>
 23ffbcc:	bf00      	nop
}
 23ffbce:	bd10      	pop	{r4, pc}
 23ffbd0:	00000000 	.word	0x00000000

023ffbd4 <_ZnajRKSt9nothrow_t>:
 23ffbd4:	f7fe bad7 	b.w	23fe186 <_Znaj>

023ffbd8 <_ZSt25__throw_bad_function_callv>:
 23ffbd8:	b508      	push	{r3, lr}
 23ffbda:	f7fe fe6d 	bl	23fe8b8 <abort>

023ffbde <atexit>:
 23ffbde:	2300      	movs	r3, #0
 23ffbe0:	4601      	mov	r1, r0
 23ffbe2:	461a      	mov	r2, r3
 23ffbe4:	4618      	mov	r0, r3
 23ffbe6:	f000 b869 	b.w	23ffcbc <__register_exitproc>

023ffbea <memcpy>:
 23ffbea:	440a      	add	r2, r1
 23ffbec:	1e43      	subs	r3, r0, #1
 23ffbee:	4291      	cmp	r1, r2
 23ffbf0:	d100      	bne.n	23ffbf4 <memcpy+0xa>
 23ffbf2:	4770      	bx	lr
 23ffbf4:	b510      	push	{r4, lr}
 23ffbf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffbfa:	4291      	cmp	r1, r2
 23ffbfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc00:	d1f9      	bne.n	23ffbf6 <memcpy+0xc>
 23ffc02:	bd10      	pop	{r4, pc}

023ffc04 <memset>:
 23ffc04:	4402      	add	r2, r0
 23ffc06:	4603      	mov	r3, r0
 23ffc08:	4293      	cmp	r3, r2
 23ffc0a:	d100      	bne.n	23ffc0e <memset+0xa>
 23ffc0c:	4770      	bx	lr
 23ffc0e:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc12:	e7f9      	b.n	23ffc08 <memset+0x4>

023ffc14 <srand>:
 23ffc14:	b538      	push	{r3, r4, r5, lr}
 23ffc16:	4b10      	ldr	r3, [pc, #64]	; (23ffc58 <srand+0x44>)
 23ffc18:	4604      	mov	r4, r0
 23ffc1a:	681d      	ldr	r5, [r3, #0]
 23ffc1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc1e:	b9b3      	cbnz	r3, 23ffc4e <srand+0x3a>
 23ffc20:	2018      	movs	r0, #24
 23ffc22:	f7fe fe1f 	bl	23fe864 <malloc>
 23ffc26:	4602      	mov	r2, r0
 23ffc28:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc2a:	b920      	cbnz	r0, 23ffc36 <srand+0x22>
 23ffc2c:	4b0b      	ldr	r3, [pc, #44]	; (23ffc5c <srand+0x48>)
 23ffc2e:	2142      	movs	r1, #66	; 0x42
 23ffc30:	480b      	ldr	r0, [pc, #44]	; (23ffc60 <srand+0x4c>)
 23ffc32:	f7fe fe5d 	bl	23fe8f0 <__assert_func>
 23ffc36:	490b      	ldr	r1, [pc, #44]	; (23ffc64 <srand+0x50>)
 23ffc38:	4b0b      	ldr	r3, [pc, #44]	; (23ffc68 <srand+0x54>)
 23ffc3a:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc3e:	4b0b      	ldr	r3, [pc, #44]	; (23ffc6c <srand+0x58>)
 23ffc40:	2100      	movs	r1, #0
 23ffc42:	6083      	str	r3, [r0, #8]
 23ffc44:	230b      	movs	r3, #11
 23ffc46:	8183      	strh	r3, [r0, #12]
 23ffc48:	2001      	movs	r0, #1
 23ffc4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffc4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc50:	2200      	movs	r2, #0
 23ffc52:	611c      	str	r4, [r3, #16]
 23ffc54:	615a      	str	r2, [r3, #20]
 23ffc56:	bd38      	pop	{r3, r4, r5, pc}
 23ffc58:	1007ae0c 	.word	0x1007ae0c
 23ffc5c:	023fff59 	.word	0x023fff59
 23ffc60:	023fff70 	.word	0x023fff70
 23ffc64:	abcd330e 	.word	0xabcd330e
 23ffc68:	e66d1234 	.word	0xe66d1234
 23ffc6c:	0005deec 	.word	0x0005deec

023ffc70 <strcpy>:
 23ffc70:	4603      	mov	r3, r0
 23ffc72:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ffc76:	f803 2b01 	strb.w	r2, [r3], #1
 23ffc7a:	2a00      	cmp	r2, #0
 23ffc7c:	d1f9      	bne.n	23ffc72 <strcpy+0x2>
 23ffc7e:	4770      	bx	lr

023ffc80 <strdup>:
 23ffc80:	4b02      	ldr	r3, [pc, #8]	; (23ffc8c <strdup+0xc>)
 23ffc82:	4601      	mov	r1, r0
 23ffc84:	6818      	ldr	r0, [r3, #0]
 23ffc86:	f000 b803 	b.w	23ffc90 <_strdup_r>
 23ffc8a:	bf00      	nop
 23ffc8c:	1007ae0c 	.word	0x1007ae0c

023ffc90 <_strdup_r>:
 23ffc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ffc92:	4604      	mov	r4, r0
 23ffc94:	4608      	mov	r0, r1
 23ffc96:	460d      	mov	r5, r1
 23ffc98:	f7fe fa4e 	bl	23fe138 <strlen>
 23ffc9c:	1c42      	adds	r2, r0, #1
 23ffc9e:	4620      	mov	r0, r4
 23ffca0:	4611      	mov	r1, r2
 23ffca2:	9201      	str	r2, [sp, #4]
 23ffca4:	f7fe fe16 	bl	23fe8d4 <_malloc_r>
 23ffca8:	4604      	mov	r4, r0
 23ffcaa:	b118      	cbz	r0, 23ffcb4 <_strdup_r+0x24>
 23ffcac:	9a01      	ldr	r2, [sp, #4]
 23ffcae:	4629      	mov	r1, r5
 23ffcb0:	f7ff ff9b 	bl	23ffbea <memcpy>
 23ffcb4:	4620      	mov	r0, r4
 23ffcb6:	b003      	add	sp, #12
 23ffcb8:	bd30      	pop	{r4, r5, pc}
	...

023ffcbc <__register_exitproc>:
 23ffcbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcc0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd80 <__register_exitproc+0xc4>
 23ffcc4:	4606      	mov	r6, r0
 23ffcc6:	461f      	mov	r7, r3
 23ffcc8:	460d      	mov	r5, r1
 23ffcca:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcce:	4691      	mov	r9, r2
 23ffcd0:	f000 f858 	bl	23ffd84 <__retarget_lock_acquire_recursive>
 23ffcd4:	4b26      	ldr	r3, [pc, #152]	; (23ffd70 <__register_exitproc+0xb4>)
 23ffcd6:	681c      	ldr	r4, [r3, #0]
 23ffcd8:	b934      	cbnz	r4, 23ffce8 <__register_exitproc+0x2c>
 23ffcda:	4c26      	ldr	r4, [pc, #152]	; (23ffd74 <__register_exitproc+0xb8>)
 23ffcdc:	601c      	str	r4, [r3, #0]
 23ffcde:	4b26      	ldr	r3, [pc, #152]	; (23ffd78 <__register_exitproc+0xbc>)
 23ffce0:	b113      	cbz	r3, 23ffce8 <__register_exitproc+0x2c>
 23ffce2:	681b      	ldr	r3, [r3, #0]
 23ffce4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffce8:	6863      	ldr	r3, [r4, #4]
 23ffcea:	2b1f      	cmp	r3, #31
 23ffcec:	dd07      	ble.n	23ffcfe <__register_exitproc+0x42>
 23ffcee:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcf2:	f000 f849 	bl	23ffd88 <__retarget_lock_release_recursive>
 23ffcf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffcfe:	b35e      	cbz	r6, 23ffd58 <__register_exitproc+0x9c>
 23ffd00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd04:	b988      	cbnz	r0, 23ffd2a <__register_exitproc+0x6e>
 23ffd06:	4b1d      	ldr	r3, [pc, #116]	; (23ffd7c <__register_exitproc+0xc0>)
 23ffd08:	b923      	cbnz	r3, 23ffd14 <__register_exitproc+0x58>
 23ffd0a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd0e:	f000 f83a 	bl	23ffd86 <__retarget_lock_release>
 23ffd12:	e7f0      	b.n	23ffcf6 <__register_exitproc+0x3a>
 23ffd14:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd18:	f7fe fda4 	bl	23fe864 <malloc>
 23ffd1c:	2800      	cmp	r0, #0
 23ffd1e:	d0f4      	beq.n	23ffd0a <__register_exitproc+0x4e>
 23ffd20:	2300      	movs	r3, #0
 23ffd22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd2a:	6863      	ldr	r3, [r4, #4]
 23ffd2c:	2201      	movs	r2, #1
 23ffd2e:	2e02      	cmp	r6, #2
 23ffd30:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd34:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd3c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd40:	ea43 0302 	orr.w	r3, r3, r2
 23ffd44:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd48:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd4c:	bf02      	ittt	eq
 23ffd4e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd52:	4313      	orreq	r3, r2
 23ffd54:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd58:	6863      	ldr	r3, [r4, #4]
 23ffd5a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd5e:	1c5a      	adds	r2, r3, #1
 23ffd60:	3302      	adds	r3, #2
 23ffd62:	6062      	str	r2, [r4, #4]
 23ffd64:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd68:	f000 f80e 	bl	23ffd88 <__retarget_lock_release_recursive>
 23ffd6c:	2000      	movs	r0, #0
 23ffd6e:	e7c4      	b.n	23ffcfa <__register_exitproc+0x3e>
 23ffd70:	1007afe0 	.word	0x1007afe0
 23ffd74:	1007af54 	.word	0x1007af54
 23ffd78:	00000000 	.word	0x00000000
 23ffd7c:	023fe865 	.word	0x023fe865
 23ffd80:	1007ae70 	.word	0x1007ae70

023ffd84 <__retarget_lock_acquire_recursive>:
 23ffd84:	4770      	bx	lr

023ffd86 <__retarget_lock_release>:
 23ffd86:	4770      	bx	lr

023ffd88 <__retarget_lock_release_recursive>:
 23ffd88:	4770      	bx	lr
	...

023ffd8c <dynalib_user>:
 23ffd8c:	e149 023f e171 023f e175 023f 0000 0000     I.?.q.?.u.?.....
 23ffd9c:	6e41 6c61 676f 7220 6165 6964 676e 3d20     Analog reading =
 23ffdac:	0020 207b 6e61 6c61 676f 6572 6461 203a      .{ analogread: 
 23ffdbc:	2000 007d 6573 736e 726f 6176 006c 0000     . }.sensorval...

023ffdcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd4:	e9c9 023f e9cf 023f ea0d 023f e9dd 023f     ..?...?...?...?.
 23ffde4:	e9cb 023f                                   ..?.

023ffde8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf0:	ef53 023f ef49 023f ef3f 023f ef35 023f     S.?.I.?.?.?.5.?.
 23ffe00:	ef29 023f ef1d 023f f145 023f f14d 023f     ).?...?.E.?.M.?.
 23ffe10:	ef11 023f ef09 023f eeff 023f eef5 023f     ..?...?...?...?.
 23ffe20:	f17d 023f                                   }.?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	ef71 023f efbb 023f ef93 023f ef73 023f     q.?...?...?.s.?.
 23ffe3c:	ef9b 023f efa3 023f efab 023f efb3 023f     ..?...?...?...?.

023ffe4c <_ZTV9IPAddress>:
	...
 23ffe54:	f015 023f f005 023f f007 023f 7061 0070     ..?...?...?.app.

023ffe64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe6c:	f105 023f f10f 023f f119 023f f123 023f     ..?...?...?.#.?.
 23ffe7c:	f12d 023f f139 023f f145 023f f14d 023f     -.?.9.?.E.?.M.?.
 23ffe8c:	f155 023f f161 023f f169 023f f173 023f     U.?.a.?.i.?.s.?.
 23ffe9c:	f17d 023f 5925 252d 2d6d 6425 2554 3a48     }.?.%Y-%m-%dT%H:
 23ffeac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	f521 023f f58d 023f f565 023f f269 023f     !.?...?.e.?.i.?.
 23ffed4:	f535 023f f551 023f f543 023f f55f 023f     5.?.Q.?.C.?._.?.
 23ffee4:	f523 023f f527 023f                         #.?.'.?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	f5d1 023f f639 023f f60f 023f f269 023f     ..?.9.?...?.i.?.
 23fff04:	f601 023f f5d3 023f f5e3 023f f633 023f     ..?...?...?.3.?.
 23fff14:	f5f3 023f f5cb 023f                         ..?...?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	f72f 023f f725 023f f71b 023f f6d1 023f     /.?.%.?...?...?.
 23fff34:	f70f 023f f703 023f f145 023f f14d 023f     ..?...?.E.?.M.?.
 23fff44:	f6f7 023f f6ef 023f f6e5 023f f6db 023f     ..?...?...?...?.
 23fff54:	f17d 023f                                   }.?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023fe28d 	.word	0x023fe28d
 23fffd0:	023fe9b9 	.word	0x023fe9b9
 23fffd4:	023fef5d 	.word	0x023fef5d
 23fffd8:	023ff0f5 	.word	0x023ff0f5
 23fffdc:	023ff255 	.word	0x023ff255
 23fffe0:	023ff31d 	.word	0x023ff31d
 23fffe4:	023ff4e9 	.word	0x023ff4e9
 23fffe8:	023ff50d 	.word	0x023ff50d
 23fffec:	023ff739 	.word	0x023ff739
